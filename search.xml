<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>英语学习</title>
      <link href="/2020/07/12/ying-yu-xue-xi/"/>
      <url>/2020/07/12/ying-yu-xue-xi/</url>
      
        <content type="html"><![CDATA[<ol><li>【TED-Ed】有效率地學習任何事物 (How to practice effectively…for just about anything - Annie Bosler and Don Greene)<iframe width="560" height="525" src="https://tw.voicetube.com/embed/48899?username=130734994086840&amp;apilang=zh_tw" frameborder="0" allowfullscreen=""></iframe></li></ol><p>遍数：1</p><p>Mastering any physical skill, be it performing a pirouette,playing an instrument, or throwing a baseball, takes practice.</p><p>practice is the repetition of an action with the goal of improvement,and it helps us perform with more ease, speed, and confidence.</p><p>so what does practice do in our brains to make us better at things?</p><p>our brains have two kinds of neural tissue: grey matter and white matter.</p><p>The grey matter processes information in the brain, directing signals and sensory stimuli to nerve cells, while white matter is mostly made up of fatty tissue and nerve fibers.</p><p>in order for our bodies to move, information needs to travel from the brain’s grey matter， down the spinal cord, through a chain of nerve  fibers called axons to our muscles.</p><p>so how does practice or repetition affect the inner workings of our brains?</p><p>The axons that exist in the white matter are wrapped with a fatty substance  called myelin.</p><p>And it’s this myelin covering, or sheath, that seems to change with practice.</p><p>Myelin is similar to insulation on electrical cables.</p><p>It prevents energy loss from electrical signals that the brain uses, moving them more efficiently along neural pathways.</p><p>some recent studies in mice suggest that the repetition of a physical motion increases the layers of myelin sheath that insulates the axons.</p><p>And the more layers , the greater the insulation around the axon chains,forming a sort of superhighway for information connecting your brain to your muscles. </p><p>So while many athletes and performers attribute their successes to muscles memory, muscles themselves don’t really have memory. </p><p>Rather, it may be the myelination of neural pathways that gives these athletes  and performers their edge with faster and more efficient neural pathways.</p><p>There are many theories that attempt to quantify the number of hours,days, and even years of practice that it takes to master a skill.</p><p>While we don’t yet have a magic number, we do know that mastery isn’t simply about the amount of hours of practice.</p><p>It’s also the quality and effectiveness of that practice.</p><p>Effective practice is consistent, intensely focused, and targets content or  weaknesses that lie at the edge of one’s current abilities.</p><p>So if effective practice is the key, how can we get the most out of our practice time ?</p><p>Try these tips:</p><p>Focus on the task at hand.</p><p>Minimize potential distractions by turning off the computer or TV and  putting your cell phone on airplane mode.</p><p>In one study, researchers observed students studying.</p><p>On average， those students were able to stay on task for only six minutes at a time.</p><p>Laptops, smartphones, and particularly Facebook were the root of most distractions.</p><p>Start out slowly or in slow-motion.</p><p>Coordination is built with repetitions, whether correct or incorrect.</p><p>If you gradually increase the speed of the quality repetitions, you have a  better chance of doing them correctly.</p><p>Next, frequent repetitions with allotted breaks are common practice habits of elite performers.</p><p>Studies have shown that many top athletes, musicians, and dancers spend 50-60 hours per week on activities related to their craft.</p><p>Many divide their time used for effective practice into multiple daily practice sessions of limited duration.</p><p>And finally, practice in your brain in vivid detail.</p><p>It’s a bit surprising, but a number of studies suggest that once a physical  motion has been established, it can be reinforced just by imagining it. </p><p>In one study, 144 basketball players where divided into two groups.</p><p>Group A physically practiced one-handed free throws while Group B only mentally practiced them.</p><p>when they were tested at the end of the two week experiment, the intermediate and experienced players in both groups had improved by nearly the same amount.</p><p>As scientists get closer to unraveling the secrets of our brains, our  understanding of effective practice will only improve.</p><p>In the meantime, effective practice is the best way we have of pushing our individual limits, achieving new heights, and maximizing our potential.</p><!-- 1. 如果你忽略了女友傳來的簡訊...(This Is What Happens When You Ignore Your Girlfriend's Texts)<iframe width="560" height="525" src="https://tw.voicetube.com/embed/18979?username=130734994086840&apilang=zh_tw" frameborder="0" allowfullscreen></iframe>2. 什麼都改變不了我對你的愛 (Nothing Gonna Change My Love For You (Lyric)-TRUE LOVE<iframe width="560" height="525" src="https://tw.voicetube.com/embed/34268?username=130734994086840&apilang=zh_tw" frameborder="0" allowfullscreen></iframe>3. 來談談人生吧：小男孩與老爺爺的觀點有什麼不同？ (57 Years Apart - A Boy And a Man Talk About Life)<iframe width="560" height="525" src="https://tw.voicetube.com/embed/44159?username=130734994086840&apilang=zh_tw" frameborder="0" allowfullscreen></iframe>5. 阿甘正傳 (Forrest Gump) 電影片段<iframe width="560" height="525" src="https://tw.voicetube.com/embed/273?username=130734994086840&apilang=zh_tw" frameborder="0" allowfullscreen></iframe>1. 【TEDx】別再自欺欺人了！你其實還沒踏出舒適圈 (TEDxSF - Mel Robbins - F--- YOU - How To Stop Screwing Yourself Over)<iframe width="560" height="525" src="https://tw.voicetube.com/embed/11025?username=130734994086840&apilang=zh_tw" frameborder="0" allowfullscreen></iframe>6. 重新定義「像個女孩一樣」 (Always #LikeAGirl)<iframe width="560" height="525" src="https://tw.voicetube.com/embed/14416?username=130734994086840&apilang=zh_tw" frameborder="0" allowfullscreen></iframe>8. 怎麼用英文寒暄呢 (Greeting People in English)<iframe width="560" height="525" src="https://tw.voicetube.com/embed/43825?username=130734994086840&apilang=zh_tw" frameborder="0" allowfullscreen></iframe>9. 來自第十一個博士的電話《超時空博士》(A Phonecall From The Eleventh Doctor - Doctor Who Series 8 - BBC)<iframe width="560" height="525" src="https://tw.voicetube.com/embed/26213?username=130734994086840&apilang=zh_tw" frameborder="0" allowfullscreen></iframe>10. 【TEDx】你如何定義你自己？ (How do you define yourself? Lizzie Velasquez at TEDxAustinWomen)<iframe width="560" height="525" src="https://tw.voicetube.com/embed/12867?username=130734994086840&apilang=zh_tw" frameborder="0" allowfullscreen></iframe>11. 想放棄！？告訴你為什麼你不能放棄！ (JUST KEEP STUDYING! - Study Motivation)<iframe width="560" height="525" src="https://tw.voicetube.com/embed/124625?username=130734994086840&apilang=zh_tw" frameborder="0" allowfullscreen></iframe>12. 【Ted-Ed】沒自信？試試「自信加速三撇步」吧！(3 tips to boost your confidence)<iframe width="560" height="525" src="https://tw.voicetube.com/embed/29821?username=130734994086840&apilang=zh_tw" frameborder="0" allowfullscreen></iframe>13.睡覺可以讓你變得更自律？能讓今天的你比昨天更好的秘密是什麼？(How I Disciplined Myself)<iframe width="560" height="525" src="https://tw.voicetube.com/embed/75521?username=130734994086840&apilang=zh_tw" frameborder="0" allowfullscreen></iframe>14. 成功人士必備：高度自律人的 6 種好習慣！ (How to be Organized for School, College or Life | The 6 Habits of Highly Organized People)<iframe width="560" height="525" src="https://tw.voicetube.com/embed/51970?username=130734994086840&apilang=zh_tw" frameborder="0" allowfullscreen></iframe>15. 不要再浪費你的時間了！ (STOP WASTING TIME | Motivational Video for Success & Studying)<iframe width="560" height="525" src="https://tw.voicetube.com/embed/65608?username=130734994086840&apilang=zh_tw" frameborder="0" allowfullscreen></iframe>16. 你不能不知道：面試成功的五大秘訣 (English Language Learning Tips - Job Interviews in English)<iframe width="560" height="525" src="https://tw.voicetube.com/embed/14476?username=130734994086840&apilang=zh_tw" frameborder="0" allowfullscreen></iframe>17. 【TED-Ed】成功者的 8 個特質 (8 traits of successful people - Richard St. John)<iframe width="560" height="525" src="https://tw.voicetube.com/embed/2862?username=130734994086840&apilang=zh_tw" frameborder="0" allowfullscreen></iframe>18. 你的人生，真的就這麼短 (This Is How Short Your Life Is.)<iframe width="560" height="525" src="https://tw.voicetube.com/embed/55095?username=130734994086840&apilang=zh_tw" frameborder="0" allowfullscreen></iframe>19. 【實用英文】5 個不能不知的電子郵件用語 (5 useful email expressions)<iframe width="560" height="525" src="https://tw.voicetube.com/embed/22270?username=130734994086840&apilang=zh_tw" frameborder="0" allowfullscreen></iframe>20. 【職場的進擊】千萬要掌握，面試十大經典必問題！( Top 10 Job Interview Questions)<iframe width="560" height="525" src="https://tw.voicetube.com/embed/6054?username=130734994086840&apilang=zh_tw" frameborder="0" allowfullscreen></iframe>21. 【TED】關於 TEDTalks 的謊言與統計數據 (Lies, damned lies and statistics (about TEDTalks))<iframe width="560" height="525" src="https://tw.voicetube.com/embed/62590?username=130734994086840&apilang=zh_tw" frameborder="0" allowfullscreen></iframe>22. 【TEDx】先問為什麼 (Start with why - how great leaders inspire action: Simon Sinek at TEDxPugetSound)<iframe width="560" height="525" src="https://tw.voicetube.com/embed/13831?username=130734994086840&apilang=zh_tw" frameborder="0" allowfullscreen></iframe>23. 【TED】Meg Jay: 二十歲的人生不能等到三十才開始 (Why 30 is not the new 20 | Meg Jay)<iframe width="560" height="525" src="https://tw.voicetube.com/embed/16212?username=130734994086840&apilang=zh_tw" frameborder="0" allowfullscreen></iframe>24. 【TED】如何只花 20 小時學習任何東西？ (Josh Kaufman | 20 Hours to Learn Anything (Key Points Talk))<iframe width="560" height="525" src="https://tw.voicetube.com/embed/36338?username=130734994086840&apilang=zh_tw" frameborder="0" allowfullscreen></iframe>25. 【TED-Ed】克服障礙，證明自我 (Overcoming obstacles - Steven Claunch)<iframe width="560" height="525" src="https://tw.voicetube.com/embed/12823?username=130734994086840&apilang=zh_tw" frameborder="0" allowfullscreen></iframe>26. 【TED】Kelly McGonigal: 如何讓壓力成為你的朋友 (How to make stress your friend | Kelly McGonigal)<iframe width="560" height="525" src="https://tw.voicetube.com/embed/8236?username=130734994086840&apilang=zh_tw" frameborder="0" allowfullscreen></iframe>27. 【TED】班傑明‧華勒斯 (Benjamin Wallace) 談快樂的價值 (Benjamin Wallace: The price of happiness)<iframe width="560" height="525" src="https://tw.voicetube.com/embed/15931?username=130734994086840&apilang=zh_tw" frameborder="0" allowfullscreen></iframe>28. 【六人行精彩片段】新年新希望半途而廢的瑞秋 (Friends:The One With All The Resolutions)<iframe width="560" height="525" src="https://tw.voicetube.com/embed/10869?username=130734994086840&apilang=zh_tw" frameborder="0" allowfullscreen></iframe>29. 【TED-Ed】你愛睡覺嗎？睡好覺的好處 (The benefits of a good night's sleep)<iframe width="560" height="525" src="https://tw.voicetube.com/embed/20332?username=130734994086840&apilang=zh_tw" frameborder="0" allowfullscreen></iframe>30. 【TED】伊莎貝·阿言德: 如何對生活充滿熱情—無論你幾歲 (Isabel Allende: How to live passionately—no matter your age)<iframe width="560" height="525" src="https://tw.voicetube.com/embed/17856?username=130734994086840&apilang=zh_tw" frameborder="0" allowfullscreen></iframe> --><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> English </category>
          
      </categories>
      
      
        <tags>
            
            <tag> English </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用的分析思维模型与方法</title>
      <link href="/2020/06/21/chang-jian-de-fen-xi-mo-xing/"/>
      <url>/2020/06/21/chang-jian-de-fen-xi-mo-xing/</url>
      
        <content type="html"><![CDATA[<h1 id="分析思维模型"><a href="#分析思维模型" class="headerlink" title="分析思维模型"></a>分析思维模型</h1><h2 id="AARRR模型"><a href="#AARRR模型" class="headerlink" title="AARRR模型"></a>AARRR模型</h2><p>用户获取-用户转化-用户留存-产生收入-用户传播<br>渠道运营分析-冷启动运营分析-留存率提升分析-商业化效率分析-产品列表运营分析</p><p><img src="https://i.loli.net/2019/02/26/5c75582b87a7c.png" alt="AARRR 模型"></p><p><img src="https://i.loli.net/2019/03/23/5c95c95929a40.jpg" alt="AARRR 模型"></p><h2 id="RFM模型"><a href="#RFM模型" class="headerlink" title="RFM模型"></a>RFM模型</h2><p>最近一次消费时间-消费频率-消费金额</p><p><img src="https://pic3.zhimg.com/v2-9e63f98ebdb73af3eae7dc99d195eb42_r.jpg" alt="RFM模型"></p><p><img src="https://i.loli.net/2019/02/23/5c70f7f128f4c.png" alt="RFM用户分群"></p><p><img src="https://i.loli.net/2020/06/21/P3AtkBd1VneoFCE.png" alt="针对性运营"></p><ul><li>通过数据标准化和权重设置，可从分类模型变成打分模型。权重设置,M最重要，F次之，R最弱。</li><li>分值定界有多种方法，往往是用中位数法。</li><li>最近一次消费时间一般是周/双周，F和M往往统计周期是月。</li><li>本质是筛选头部走点客户重点运营。 </li></ul><h2 id="5W2H模型"><a href="#5W2H模型" class="headerlink" title="5W2H模型"></a>5W2H模型</h2><p><img src="https://i.loli.net/2020/07/05/32hJ4seBOQv596w.png" alt="5W2H"></p><p>今天，我来介绍一种分析方法：5W2H法。 5W2H,是英文中常见的7个问题：what,why, where，when， who，how，和 how much 的缩写，把这七个问题放在一起问，有助于我们准确界定和表述问题，有助于思路的条理化，提高工作效率。</p><p>比如，当接到老板的一个新要求时，可以从如下几个角度思考：</p><ol><li>What ：老板交给我的任务是什么？如果没听懂，就坦白承认，请对方再帮忙解说一遍。</li><li>Why ：老板为什么要做这件事？通过这个问题能帮你快速建立起对这个需求的认知框架。</li><li>Who ：这个任务需要和谁对接？我熟悉他们吗？</li><li>Where ：任务中，碰到问题的用户在哪里？发生问题的场景是什么？</li><li>When ：老板希望任务在什么时候完成？我能够完成的时间大概是什么时候？</li><li>How ：如何才能完成这个任务？老板能给我什么资源？我可能调动哪些资源？</li><li>How much ：我能够做到什么程度？需要投入的设计和开发资源有多大？</li></ol><p>如果问清楚这几个问题，那么就算你是一个刚入行的新手，也能在正确理解老板意图和解决问题的道路上迈进，提高自己的工作效率。</p><!-- what-why-where-when-who-how-how much何事-何因-何地-何时-何人-如何做-何价 --><!-- ![思维导图](https://i.loli.net/2019/02/26/5c7418d10b4c8.png) --><!-- ![6W2H](https://i.loli.net/2019/08/19/lIgkeLbfNXtDHOu.jpg) --><p><a href="http://www.woshipm.com/pmd/604401.html" target="_blank" rel="noopener">http://www.woshipm.com/pmd/604401.html</a></p><h2 id="用户生命周期模型"><a href="#用户生命周期模型" class="headerlink" title="用户生命周期模型"></a>用户生命周期模型</h2><p><img src="https://i.loli.net/2019/03/23/5c95c9d2e937c.jpg" alt="用户生命周期模型"></p><p><img src="https://i.loli.net/2019/03/23/5c95ca1b5fdc9.jpg" alt="对应的关键指标"></p><h2 id="SWOT模型"><a href="#SWOT模型" class="headerlink" title="SWOT模型"></a>SWOT模型</h2><p>优势-劣势-机会-威胁</p><p><img src="https://i.loli.net/2019/02/26/5c754bb2536a0.jpg" alt="对自己进行解析"><br><img src="https://i.loli.net/2019/02/26/5c754bc095f85.jpg" alt="指定相应的对策"></p><h1 id="分析思维方法"><a href="#分析思维方法" class="headerlink" title="分析思维方法"></a>分析思维方法</h1><h2 id="对比分析法"><a href="#对比分析法" class="headerlink" title="对比分析法"></a>对比分析法</h2><h2 id="维度拆解法"><a href="#维度拆解法" class="headerlink" title="维度拆解法"></a>维度拆解法</h2><h2 id="漏斗分析法"><a href="#漏斗分析法" class="headerlink" title="漏斗分析法"></a>漏斗分析法</h2><h2 id="时间序列趋势分析"><a href="#时间序列趋势分析" class="headerlink" title="时间序列趋势分析"></a>时间序列趋势分析</h2><h2 id="公式分析法"><a href="#公式分析法" class="headerlink" title="公式分析法"></a>公式分析法</h2><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 分析思维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分析思维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>技能-Hive-SQL学习</title>
      <link href="/2020/06/19/ji-neng-hive-sql-xue-xi/"/>
      <url>/2020/06/19/ji-neng-hive-sql-xue-xi/</url>
      
        <content type="html"><![CDATA[<h2 id="SQL中的简单查询"><a href="#SQL中的简单查询" class="headerlink" title="SQL中的简单查询"></a>SQL中的简单查询</h2><p>表：score_student</p><table><thead><tr><th>id</th><th>name</th><th>class</th><th>age</th><th>score</th></tr></thead><tbody><tr><td>01</td><td>甲</td><td>一班</td><td>18</td><td>{“语文”:89,”数学”:98,”英语”:76}</td></tr><tr><td>02</td><td>乙</td><td>一班</td><td>19</td><td>{“语文”:96,”数学”:52,”英语”:78}</td></tr><tr><td>03</td><td>丙</td><td>二班</td><td>21</td><td>{“语文”:76,”数学”:69,”英语”:89}</td></tr><tr><td>04</td><td>丁</td><td>二班</td><td>23</td><td>{“语文”:92,”数学”:91,”英语”:96}</td></tr><tr><td>05</td><td>张</td><td>三班</td><td>25</td><td>{“语文”:85,”数学”:90,”英语”:73}</td></tr></tbody></table><ol><li><p>获取指定的数据</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span>  id<span class="token punctuation">,</span> name<span class="token keyword">from</span>  score_student<span class="token keyword">where</span>  class <span class="token operator">=</span> <span class="token string">'一班'</span></code></pre></li><li><p>插入一列固定值</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> id<span class="token punctuation">,</span> name<span class="token punctuation">,</span> <span class="token string">"age &lt; 20 "</span> <span class="token keyword">as</span> label<span class="token keyword">from</span>  score_student<span class="token keyword">where</span>  age <span class="token operator">&lt;</span> <span class="token number">20</span></code></pre><table><thead><tr><th>id</th><th>name</th><th>label</th></tr></thead><tbody><tr><td>01</td><td>甲</td><td>age &lt; 20</td></tr><tr><td>02</td><td>乙</td><td>age &lt; 20</td></tr></tbody></table></li><li><p>json解析-获取对应的value值</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> name<span class="token punctuation">,</span> json_extract<span class="token punctuation">(</span>score<span class="token punctuation">,</span> <span class="token string">'$.英语'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">'英语成绩'</span><span class="token keyword">from</span>  score_student</code></pre><table><thead><tr><th>name</th><th>英语成绩</th></tr></thead><tbody><tr><td>甲</td><td>76</td></tr><tr><td>乙</td><td>78</td></tr><tr><td>丙</td><td>89</td></tr><tr><td>张</td><td>73</td></tr></tbody></table></li><li><p>json解析-查看key值</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> name<span class="token punctuation">,</span> json_keys<span class="token punctuation">(</span>score<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">'科目'</span><span class="token keyword">from</span>  score_student</code></pre><table><thead><tr><th>name</th><th>科目</th></tr></thead><tbody><tr><td>甲</td><td>[“语文”,”数学”,”英语”]</td></tr><tr><td>乙</td><td>[“语文”,”数学”,”英语”]</td></tr><tr><td>丙</td><td>[“语文”,”数学”,”英语”]</td></tr><tr><td>张</td><td>[“语文”,”数学”,”英语”]</td></tr></tbody></table></li></ol><ol start="5"><li>加入表中一列含有多个元素， 我们可以只查找此列的第一个元素<pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> name<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">from</span> employees</code></pre></li></ol><ol start="6"><li>可以使用 “点” 符号， 如：表的别名.列名<pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span>   name<span class="token punctuation">,</span>  address<span class="token punctuation">.</span>city  <span class="token keyword">from</span>   employees</code></pre></li></ol><ol start="7"><li><p>使用正则表达式，可以选出所有列名以 price 作为前缀的列</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span>  <span class="token string">'price.*'</span>  <span class="token keyword">from</span>   stocks</code></pre></li><li><p>where中关系型运算符优先级高到低为：not - and - or</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span>  <span class="token operator">*</span> <span class="token keyword">from</span>  employees <span class="token keyword">where</span>  country  <span class="token operator">not</span> <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token string">'us'</span><span class="token punctuation">,</span> <span class="token string">'china'</span><span class="token punctuation">)</span></code></pre></li><li><p>where中用like、rlike进行数据筛选</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span>  name<span class="token punctuation">,</span>  address<span class="token punctuation">.</span>street <span class="token keyword">from</span>  employees <span class="token keyword">where</span>  address<span class="token punctuation">.</span>street <span class="token operator">rlike</span> <span class="token string">'.*(beijing|shanghai).*'</span> <span class="token comment" spellcheck="true">--address.street like '%beijing%' </span></code></pre></li></ol><ul><li><p>like与rlike中常见的通配符</p><table><thead><tr><th>like通配符</th><th>含义</th></tr></thead><tbody><tr><td>%</td><td>匹配0个或任意多个字符</td></tr><tr><td>_</td><td>匹配任意一个字符</td></tr><tr><td>escape</td><td>转义字符，可匹配%和<em>。如SELECT * FROM table_name WHERE column_name LIKE ‘/%/</em>%_’ ESCAPE’/‘</td></tr></tbody></table><table><thead><tr><th>rlike通配符</th><th>含义</th></tr></thead><tbody><tr><td>.</td><td>匹配任意单个字 符</td></tr><tr><td>*</td><td>匹配0个或多个前一个得到的字符</td></tr><tr><td>[]</td><td>含有任意一个[]内的字符，[ab]*可匹配空串、a、b、或者由任意个a和b组成的字符串</td></tr><tr><td>^</td><td>匹配开头，如^s匹配以s或者S开头的字符串</td></tr><tr><td>$</td><td>匹配结尾，如s$匹配以s结尾的字符串</td></tr><tr><td>{n}</td><td>匹配前一个字符反复n次</td></tr></tbody></table></li></ul><ol start="10"><li>对数据进行排序——order by<pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span><span class="token operator">*</span><span class="token keyword">from</span> <span class="token number">a</span> <span class="token keyword">order</span> <span class="token keyword">by</span> code <span class="token keyword">asc</span><span class="token punctuation">,</span> name <span class="token keyword">desc</span></code></pre></li></ol><ul><li><p>排序说明</p><table><thead><tr><th>字段</th><th>说明</th></tr></thead><tbody><tr><td>order by a,b</td><td>a和b都是升序</td></tr><tr><td>order by a,b desc</td><td>a升序，b降序</td></tr><tr><td>order by a desc，b</td><td>a降序，b升序</td></tr><tr><td>order by a desc，b desc</td><td>a，b都是降序</td></tr></tbody></table></li></ul><ol start="11"><li>对数据进行限制-limit<pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span>account<span class="token keyword">from</span> employees<span class="token keyword">limit</span> <span class="token number">10</span> <span class="token comment" spellcheck="true">---使用limit语句限制返回的行数，只显示 10 行</span><span class="token keyword">limit</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token comment" spellcheck="true">--获取第2行（不包含第2行），以后的3行数据</span></code></pre></li></ol><h2 id="数据预处理"><a href="#数据预处理" class="headerlink" title="数据预处理"></a>数据预处理</h2><ol><li><p>排除缺失值</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span>  <span class="token operator">*</span><span class="token keyword">from</span>  score_student<span class="token keyword">where</span>  score <span class="token operator">!=</span> <span class="token string">""</span> <span class="token operator">or</span>  score <span class="token operator">is</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token operator">or</span>  score <span class="token operator">!=</span> <span class="token string">" "</span></code></pre></li><li><p>缺失值填充</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> id<span class="token punctuation">,</span> <span class="token keyword">coalesce</span><span class="token punctuation">(</span>score<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">--当score为null值时，将返回1，否则返回score真实值</span> <span class="token keyword">coalesce</span><span class="token punctuation">(</span> name<span class="token punctuation">,</span> score<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">--当name不为null，那么无论score是否为null，都返回name的真实值。当name为null,而score不为null时，返回score的真实值。当name和score都为null时，返回1</span><span class="token keyword">from</span>  score_student</code></pre><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> id<span class="token punctuation">,</span> <span class="token keyword">if</span><span class="token punctuation">(</span>score<span class="token operator">!=</span> <span class="token string">""</span><span class="token punctuation">,</span> score<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">from</span>  score_student</code></pre></li><li><p>重复值处理</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span>   <span class="token keyword">distinct</span> user_account<span class="token punctuation">,</span><span class="token comment" spellcheck="true">--如果用 distinct, select 后面必须直接跟 distinct</span> province <span class="token keyword">from</span>     computer</code></pre><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> user_account<span class="token punctuation">,</span> province<span class="token keyword">from</span> computer<span class="token keyword">group</span> <span class="token keyword">by</span>  user_account<span class="token punctuation">,</span> province</code></pre></li><li><p>数据格式转换-cast与convert函数</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> age<span class="token punctuation">,</span> cast<span class="token punctuation">(</span>age <span class="token keyword">as</span> <span class="token keyword">decimal</span><span class="token punctuation">)</span> <span class="token keyword">as</span> decimal_age<span class="token punctuation">,</span> <span class="token keyword">convert</span><span class="token punctuation">(</span>age <span class="token keyword">as</span> char<span class="token punctuation">)</span> <span class="token keyword">as</span> char_age<span class="token keyword">from</span>  score</code></pre></li></ol><ul><li><p>数据类型</p><table><thead><tr><th>类型</th><th>符号</th></tr></thead><tbody><tr><td>浮点型</td><td>decimal</td></tr><tr><td>整形</td><td>signed</td></tr><tr><td>字符型</td><td>char</td></tr><tr><td>二进制</td><td>binary</td></tr><tr><td>日期</td><td>date</td></tr><tr><td>时间</td><td>time</td></tr><tr><td>日期时间</td><td>datetime</td></tr></tbody></table></li></ul><h2 id="数据运算"><a href="#数据运算" class="headerlink" title="数据运算"></a>数据运算</h2><ol><li>算数运算<pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> id<span class="token punctuation">,</span> <span class="token punctuation">(</span>score_a <span class="token operator">+</span> score_b<span class="token punctuation">)</span> <span class="token keyword">as</span> all_score<span class="token keyword">from</span>  score_student</code></pre></li></ol><ul><li><p>算数运算符</p><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>+</td><td>加法</td></tr><tr><td>-</td><td>减法</td></tr><tr><td>*</td><td>乘法</td></tr><tr><td>/</td><td>除法</td></tr><tr><td>% , mod</td><td>取余</td></tr><tr><td>div</td><td>整除</td></tr></tbody></table></li></ul><ol start="2"><li>比较运算<pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> id<span class="token punctuation">,</span> score_a<span class="token punctuation">,</span> score_b<span class="token punctuation">,</span> score_a <span class="token operator">></span> score_b <span class="token keyword">as</span> <span class="token string">'大于'</span> <span class="token comment" spellcheck="true">--返回1或0</span><span class="token keyword">from</span> score_student</code></pre></li></ol><ul><li>比较运算符<table><thead><tr><th><strong>操作符</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>=</td><td>等于</td></tr><tr><td>&lt;&gt; , !=</td><td>不等于</td></tr><tr><td>&lt;</td><td>小于</td></tr><tr><td>&gt;</td><td>大于</td></tr><tr><td>&lt;=</td><td>小于或等于</td></tr><tr><td>&gt;=</td><td>大于或等于</td></tr><tr><td>[not] between</td><td>介于</td></tr><tr><td>in</td><td>包含</td></tr><tr><td>is [not] null</td><td>空值</td></tr></tbody></table></li></ul><ol start="3"><li>逻辑运算<pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span>  id<span class="token punctuation">,</span> score_a<span class="token punctuation">,</span> score_b<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>score_a <span class="token operator">></span><span class="token number">85</span><span class="token punctuation">)</span> <span class="token operator">and</span> <span class="token punctuation">(</span> score_b <span class="token operator">></span> <span class="token number">85</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">"双优"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>score_a <span class="token operator">></span><span class="token number">85</span><span class="token punctuation">)</span> <span class="token operator">or</span> <span class="token punctuation">(</span> score_b <span class="token operator">></span> <span class="token number">85</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">"单优"</span><span class="token keyword">from</span>  score_student</code></pre></li></ol><ul><li><p>逻辑运算符</p><table><thead><tr><th><strong>逻辑符</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>and</td><td>和</td></tr><tr><td>or</td><td>或</td></tr><tr><td>not</td><td>非</td></tr></tbody></table></li></ul><ol start="4"><li>数学运算<pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span>  id<span class="token punctuation">,</span> score_a<span class="token punctuation">,</span> score_b<span class="token punctuation">,</span> abs<span class="token punctuation">(</span>score_a <span class="token operator">-</span>core_b <span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">"绝对差值"</span><span class="token punctuation">,</span> sign<span class="token punctuation">(</span>score_a <span class="token operator">-</span>core_b <span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">"正负"</span><span class="token keyword">from</span>  score_student</code></pre></li></ol><ul><li><p>数学运算符</p><table><thead><tr><th><strong>数学函数</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>abs(x)</td><td>返回x的绝对值</td></tr><tr><td>ceil(x)</td><td>返回不小于x的最小整数值</td></tr><tr><td>floor(x)</td><td>返回不大于x的最大整数值</td></tr><tr><td>rand()</td><td>返回一个随机浮点值</td></tr><tr><td>round(d,x)</td><td>返回d精确度的x</td></tr><tr><td>sign(x)</td><td>返回x的正负，如果为正返回1，为负返回-1</td></tr></tbody></table></li></ul><ol start="5"><li>聚合运算<pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span>  <span class="token function">sum</span><span class="token punctuation">(</span>score_a<span class="token punctuation">)</span> <span class="token keyword">as</span> a_sum<span class="token punctuation">,</span> <span class="token function">sum</span><span class="token punctuation">(</span>score_b<span class="token punctuation">)</span> <span class="token keyword">as</span> b_sum<span class="token punctuation">,</span> <span class="token function">sum</span><span class="token punctuation">(</span>a_sum<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">sum</span><span class="token punctuation">(</span>b_sum<span class="token punctuation">)</span> <span class="token keyword">as</span> a_b_sum<span class="token keyword">from</span>  score_student</code></pre></li></ol><ul><li><p>聚合函数</p><table><thead><tr><th>聚合函数</th><th>定义</th></tr></thead><tbody><tr><td>count()</td><td>个数统计函数</td></tr><tr><td>sum()</td><td>求和</td></tr><tr><td>avg()</td><td>平均值</td></tr><tr><td>min()</td><td>最小值</td></tr><tr><td>max()</td><td>最大值</td></tr><tr><td>corr(A, B)</td><td>相关系数</td></tr><tr><td>var_pop()</td><td>总体方差</td></tr><tr><td>var_samp()</td><td>样本方差</td></tr><tr><td>std()</td><td>总体标准差</td></tr><tr><td>stddev_samp</td><td>样本标准差</td></tr></tbody></table></li></ul><ul><li>count(1)、count(*)、count(column) 之间的区别<blockquote><p>执行范围上： count(*) 和 count (1)  都包含了 对NULL的统计。 count(列名)统计时不包含NULL值。<br>执行速度上： 列名为主键时， count(列名) 最快。  当无主键时， count(1) 最快。  当表只有一个字段，count(*) 最快。</p></blockquote></li></ul><h2 id="字符串处理"><a href="#字符串处理" class="headerlink" title="字符串处理"></a>字符串处理</h2><ol><li><p>字符串函数</p><table><thead><tr><th>函数名</th><th>定义</th></tr></thead><tbody><tr><td>concat(str1, str2,..strn)</td><td>将str1,str2,…strn合并成一个字符串,只要其中一个是NUll，则返回NUll</td></tr><tr><td>concat_ws(s,str1, str2,…strn)</td><td>将str1,str2,…strn用连接符s合并成一个字符串,只能接收 string或string类型的数组，只要有一个字符串不是NUll， 则不会返回NULL</td></tr><tr><td>collect_set(col)</td><td>将某字段的值进行去重汇总，产生array类型字段</td></tr><tr><td>collect_list(col)</td><td>将某字段的值进行汇总不去重，产生array类型字段</td></tr><tr><td>explode(col)</td><td>将hive列中复杂的array或者map结构拆分成多行</td></tr><tr><td>substr / substring(str,m,n)</td><td>获取字符串str从m位置开始，长度为n的字符串</td></tr><tr><td>split(str, s)</td><td>str字符串通过s进行分割</td></tr><tr><td>substring_index(str, s,n)</td><td>str字符串通过第n个s进行分割</td></tr><tr><td>replace(str,a,b)</td><td>将str字符串中的a替换成b</td></tr><tr><td>left(str, n)</td><td>取str字符串中最左边的n个字符</td></tr><tr><td>right(str,n)</td><td>取str字符串中最右边的n个字符</td></tr><tr><td>ltrim(str)</td><td>去除str字符串左边的空格</td></tr><tr><td>rtrim(str)</td><td>去除str字符串右边的空格</td></tr><tr><td>trim(str)</td><td>去除str字符串开头和结尾的空格</td></tr><tr><td>length / char_length(str)</td><td>返回str字符串的字符长度，一个汉字算三个字符</td></tr><tr><td>repeat(str,n)</td><td>将str字符串重复n遍</td></tr><tr><td>lower()</td><td>将字串转化为小写</td></tr><tr><td>upper()</td><td>将字符转化为大写</td></tr><tr><td>lpad(str1，n，str2)</td><td>在str1字符串的左边第n个位置，添加str2</td></tr><tr><td>rpad(str1，n，str2)</td><td>在str1字符串的右边第n个位置，添加str2</td></tr><tr><td>instr (A ,B )</td><td>返回字符B首次在A中出现的位置,不存在返回0</td></tr></tbody></table></li></ol><ol start="2"><li><p><strong>substr函数与 substring函数用法</strong></p><pre class=" language-sql"><code class="language-sql">substr<span class="token punctuation">(</span>string<span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span>: 从右第<span class="token number">4</span>位置截取到最后，结果为：ingsubstring<span class="token punctuation">(</span>string<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>:取左边第<span class="token number">1</span>位置起，<span class="token number">3</span>字长的字符串，结果为：strsubstring<span class="token punctuation">(</span>string<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>:取右边第<span class="token number">1</span>位置起，<span class="token number">3</span>字长的字符串<span class="token punctuation">,</span>右边第一位置往右不够<span class="token number">3</span>字长，结果为：gsubstring<span class="token punctuation">(</span>string<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>:取右边第<span class="token number">1</span>位置起，<span class="token number">3</span>字长的字符串，结果为：ing</code></pre></li><li><p><strong>substring_index函数</strong></p><pre class=" language-sql"><code class="language-sql">substring_index<span class="token punctuation">(</span><span class="token string">'15,151,152,16'</span><span class="token punctuation">,</span><span class="token string">','</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>：取第一个逗号前面的字符串，结果为：<span class="token number">15</span>substring_index<span class="token punctuation">(</span><span class="token string">'15,151,152,16'</span><span class="token punctuation">,</span><span class="token string">','</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>：取第二个逗号前面部分，结果为：<span class="token number">15</span><span class="token punctuation">,</span><span class="token number">151</span>substring_index<span class="token punctuation">(</span><span class="token string">'15,151,152,16'</span><span class="token punctuation">,</span><span class="token string">','</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>：取目标字符串中最后一个含 “<span class="token punctuation">,</span>” 位子的后的部分，结果为：<span class="token number">16</span>substring_index<span class="token punctuation">(</span>substring_index<span class="token punctuation">(</span><span class="token string">'15,151,152,16'</span><span class="token punctuation">,</span><span class="token string">','</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">','</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>:取第二个逗号前面部分<span class="token punctuation">,</span>然后最后逗号的前面部分，结果为：<span class="token number">151</span>substring_index<span class="token punctuation">(</span>substring_index<span class="token punctuation">(</span><span class="token string">'15,151,152,16'</span><span class="token punctuation">,</span><span class="token string">','</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">','</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>：取倒数第二个逗号后面部分字符串，再去这部分里第一个都号前的部分，结果为：<span class="token number">152</span></code></pre></li><li><p><strong>split函数</strong></p><pre class=" language-sql"><code class="language-sql">split<span class="token punctuation">(</span><span class="token string">'a,b,c,d'</span><span class="token punctuation">,</span><span class="token string">','</span><span class="token punctuation">)</span>:根据逗号进行分割，结果为： <span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token string">"c"</span><span class="token punctuation">,</span><span class="token string">"d"</span><span class="token punctuation">]</span>split<span class="token punctuation">(</span><span class="token string">'a,b,c,d'</span><span class="token punctuation">,</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>： 取结果数组中的某一项，结果为： <span class="token number">a</span>split<span class="token punctuation">(</span><span class="token string">'192.168.0.1'</span><span class="token punctuation">,</span><span class="token string">'\\.'</span><span class="token punctuation">)</span>： 点号这种特殊字符的时候需要做特殊的处理，结果为：<span class="token punctuation">[</span><span class="token string">"192"</span><span class="token punctuation">,</span><span class="token string">"168"</span><span class="token punctuation">,</span><span class="token string">"0"</span><span class="token punctuation">,</span><span class="token string">"1"</span><span class="token punctuation">]</span><span class="token string">"....  split('192.168.0.1','\\\\.') ... "</span>: split包含在 <span class="token string">""</span> 之中时 需要加<span class="token number">4</span>个\<span class="token punctuation">,</span>不然得到的值是<span class="token boolean">null</span><span class="token punctuation">,</span>同样的 <span class="token operator">|</span> 等特殊符号也需要做类似处理。</code></pre></li></ol><ul><li>例如： 将一些字段拆解出来进行使用<blockquote><p>比如：Syjh-sjsy-zygn-3_1字段，我们只需要Syjh-sjsy-zygn位置的所有按钮。</p></blockquote><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span>   substring_index<span class="token punctuation">(</span>nbtn_position<span class="token punctuation">,</span> <span class="token string">'-'</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">as</span> position<span class="token punctuation">,</span>  <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">distinct</span> user_account<span class="token punctuation">)</span> <span class="token keyword">as</span> uv <span class="token keyword">from</span>   apache_computer_view<span class="token keyword">where</span>   hit_date <span class="token operator">=</span> <span class="token string">'2020-03-01'</span>  <span class="token operator">and</span>   nbtn_position <span class="token operator">like</span> <span class="token string">'%Syjh%'</span><span class="token keyword">group</span> <span class="token keyword">by</span>   substring_index<span class="token punctuation">(</span>nbtn_position<span class="token punctuation">,</span> <span class="token string">'-'</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span></code></pre></li></ul><ol start="5"><li><strong>lpad(str1,len,str2)</strong> <pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span>  lpad<span class="token punctuation">(</span>nbtn_name<span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token string">'xo'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">'左填充'</span><span class="token punctuation">,</span> rpad<span class="token punctuation">(</span>nbtn_name<span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token string">'xo'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">'右填充'</span><span class="token punctuation">,</span> nbtn_name <span class="token keyword">as</span> <span class="token string">'不填充'</span><span class="token keyword">from</span>  table1</code></pre><table><thead><tr><th>左填充</th><th>右填充</th><th>不填充</th></tr></thead><tbody><tr><td>xoxo张晓东</td><td>张晓东xoxo</td><td>张晓东</td></tr></tbody></table></li></ol><ol start="6"><li><p><strong>concat_ws函数</strong> </p><blockquote><p>把下表中星座和血型一样的人归类到一起：</p></blockquote><table><thead><tr><th>name</th><th>contellation</th><th>blood_type</th></tr></thead><tbody><tr><td>孙悟空</td><td>白羊座</td><td>A</td></tr><tr><td>猪八戒</td><td>射手座</td><td>A</td></tr><tr><td>宋宋</td><td>白羊座</td><td>B</td></tr><tr><td>唐僧</td><td>白羊座</td><td>A</td></tr><tr><td>张帅</td><td>射手座</td><td>A</td></tr></tbody></table><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> con_blood<span class="token punctuation">,</span>concat_ws <span class="token punctuation">(</span><span class="token string">"\"</span><span class="token punctuation">,</span> collect_set<span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> concat_ws<span class="token punctuation">(</span> <span class="token string">','</span><span class="token punctuation">,</span> contellation<span class="token punctuation">,</span> blood_type<span class="token punctuation">)</span> <span class="token keyword">as</span> con_blood<span class="token punctuation">,</span>name<span class="token keyword">from</span> table1<span class="token punctuation">)</span> <span class="token keyword">group</span> <span class="token keyword">by</span> con_blood</code></pre><blockquote><p>得到结果如下：</p></blockquote><table><thead><tr><th>con_blod</th><th>name</th></tr></thead><tbody><tr><td>射手座,A</td><td>猪八戒\张帅</td></tr><tr><td>白羊座，A</td><td>孙悟空\唐僧</td></tr><tr><td>白羊座，B</td><td>宋</td></tr></tbody></table></li></ol><ol start="7"><li><p><strong>collect_set函数</strong> </p><blockquote><p>求将每个省的城市列出来</p></blockquote><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> province<span class="token punctuation">,</span> collect_set<span class="token punctuation">(</span>city<span class="token punctuation">)</span> <span class="token keyword">from</span> android <span class="token keyword">where</span>  dt <span class="token operator">=</span> <span class="token string">'2020-05-01'</span> <span class="token operator">and</span> city <span class="token operator">is</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">group</span> <span class="token keyword">by</span> province <span class="token comment" spellcheck="true">---辽宁省  ["营口市","大连","大连市",.....,"朝阳"]</span></code></pre><blockquote><p>求出一个月内活跃天数大于20天的用户数</p></blockquote><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">distinct</span> user_account<span class="token punctuation">)</span> <span class="token keyword">as</span> uv <span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">select</span> user_account<span class="token punctuation">,</span>collect_set<span class="token punctuation">(</span>hit_date<span class="token punctuation">)</span>  <span class="token keyword">as</span> dt<span class="token keyword">from</span> an<span class="token keyword">where</span> hit_date <span class="token operator">between</span> <span class="token string">'2020-05-01'</span> <span class="token operator">and</span> <span class="token string">'2020-05-31'</span><span class="token keyword">group</span> <span class="token keyword">by</span> user_account<span class="token keyword">having</span>size<span class="token punctuation">(</span>dt<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">20</span><span class="token punctuation">)</span></code></pre></li><li><p><strong>explode函数</strong>  </p></li></ol><ul><li><p>函数说明</p><blockquote><ul><li>explode(col): 将hive列中复杂的array或者map结构拆分成多行</li><li><strong>lateral view</strong> 用法： lateral view UDTF(expression) adtable  as a1  说明： 用户和split,explode 等UDTF一起使用，能够将一列数据拆分成多行数据， 在此基础上可以对拆分的数据进行聚合计算. 形成一个新的表，并对原来的表进行侧写</li></ul></blockquote></li><li><p>需求1：</p><blockquote><p>将如下表进行拆分</p></blockquote><table><thead><tr><th>movie</th><th>category</th></tr></thead><tbody><tr><td>《疑犯追踪》</td><td>悬疑,动作,科幻,剧情</td></tr><tr><td>《lie to me》</td><td>警匪,动作,心理</td></tr></tbody></table><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span>   movie<span class="token punctuation">.</span> categrory_name<span class="token keyword">from</span> movie_infolateral  <span class="token keyword">view</span> explode <span class="token punctuation">(</span> categrory<span class="token punctuation">)</span>  adtable <span class="token keyword">as</span> categrory_name</code></pre><blockquote><p>得到结果如下：</p></blockquote><table><thead><tr><th>movie</th><th>category</th></tr></thead><tbody><tr><td>《疑犯追踪》</td><td>悬疑</td></tr><tr><td>《疑犯追踪》</td><td>动作</td></tr><tr><td>《疑犯追踪》</td><td>科幻</td></tr><tr><td>《疑犯追踪》</td><td>剧情</td></tr><tr><td>《lie to me》</td><td>警匪</td></tr><tr><td>《lie to me》</td><td>动作</td></tr><tr><td>《lie to me》</td><td>心理</td></tr></tbody></table></li></ul><ul><li><p>需求2： </p><blockquote><p>将 表 table 中的 <code>adid_list</code> 转换为单独的行。</p></blockquote><table><thead><tr><th>pageid</th><th>adid_list</th></tr></thead><tbody><tr><td>front_page</td><td>[1,2,3]</td></tr><tr><td>contact_page</td><td>[3,4]</td></tr></tbody></table><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span>   pageid<span class="token punctuation">,</span> adid<span class="token keyword">from</span>   talbe1lateral <span class="token keyword">view</span> explode<span class="token punctuation">(</span>adid_list<span class="token punctuation">)</span> adtable <span class="token keyword">as</span> adid</code></pre><blockquote><p>输出结果为： </p></blockquote><table><thead><tr><th>pageid</th><th>adid_list</th></tr></thead><tbody><tr><td>front_page</td><td>1</td></tr><tr><td>front_page</td><td>2</td></tr><tr><td>front_page</td><td>3</td></tr><tr><td>contact_page</td><td>3</td></tr><tr><td>contact_page</td><td>4</td></tr></tbody></table></li></ul><ul><li><p>需求3： </p><blockquote><p>多个 lateral view 查询</p></blockquote><table><thead><tr><th>array</th><th>col2</th></tr></thead><tbody><tr><td>[1,2]</td><td>[“a”，”b”]</td></tr><tr><td>[3,4]</td><td>[“c”, “d”]</td></tr></tbody></table><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span>   mycol1<span class="token punctuation">,</span>  mycol2<span class="token keyword">from</span>   table1alteral  <span class="token keyword">view</span> explode<span class="token punctuation">(</span>array<span class="token punctuation">)</span> adtable <span class="token keyword">as</span> mycol1 alteral  <span class="token keyword">view</span> explode<span class="token punctuation">(</span>col2<span class="token punctuation">)</span>  adtable <span class="token keyword">as</span> mycol2</code></pre><blockquote><p>输出结果为： </p></blockquote><table><thead><tr><th>myCol1</th><th>myCol2</th></tr></thead><tbody><tr><td>1</td><td>“a”</td></tr><tr><td>1</td><td>“b”</td></tr><tr><td>2</td><td>“a”</td></tr><tr><td>2</td><td>“b”</td></tr><tr><td>3</td><td>“c”</td></tr><tr><td>3</td><td>“d”</td></tr><tr><td>4</td><td>“c”</td></tr><tr><td>4</td><td>“d”</td></tr></tbody></table></li></ul><hr><h2 id="控制函数"><a href="#控制函数" class="headerlink" title="控制函数"></a>控制函数</h2><ol><li><p><strong>IF( expr , v1 , v2 )函数</strong></p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span>  <span class="token operator">*</span>   <span class="token keyword">if</span><span class="token punctuation">(</span>age<span class="token operator">&lt;</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token string">'少年'</span><span class="token punctuation">,</span><span class="token string">'青年'</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> ifage <span class="token comment" spellcheck="true">--- 查出班级所有学生，如果年龄小于20，就标准为少年，否则标记为青年。</span><span class="token keyword">from</span>   student</code></pre></li><li><p><strong>ifnull(V1,V2)函数</strong></p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> ifnull<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">--如果v1不为空，则直接返回v1;如果v1为空，则返回参数v2</span> ifnull<span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p><strong>case when 函数</strong></p></li></ol><ul><li>对不同字母进行省份转换<pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span><span class="token keyword">case</span>       <span class="token keyword">when</span> province <span class="token operator">like</span> <span class="token string">'ah'</span> <span class="token keyword">then</span> <span class="token string">'安徽'</span>      <span class="token keyword">when</span> province <span class="token operator">like</span> <span class="token string">'fj'</span> <span class="token keyword">then</span> <span class="token string">'福建'</span>      <span class="token keyword">when</span> province <span class="token operator">like</span> <span class="token string">'gd'</span> <span class="token keyword">then</span> <span class="token string">'广东'</span>  <span class="token keyword">else</span> <span class="token string">'m'</span>   <span class="token keyword">end</span> <span class="token keyword">as</span> province <span class="token punctuation">,</span>  <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">distinct</span> user_account<span class="token punctuation">)</span> uv<span class="token punctuation">,</span>  <span class="token function">count</span><span class="token punctuation">(</span>page_name<span class="token punctuation">)</span> pv<span class="token keyword">from</span> android_log<span class="token keyword">where</span> hit_date <span class="token operator">between</span> <span class="token string">'{}'</span> <span class="token operator">and</span> <span class="token string">'{}'</span><span class="token operator">and</span> page_name <span class="token operator">like</span> <span class="token string">'%Kefujh%'</span><span class="token keyword">group</span> <span class="token keyword">by</span> <span class="token keyword">case</span>       <span class="token keyword">when</span> province <span class="token operator">like</span> <span class="token string">'ah'</span> <span class="token keyword">then</span> <span class="token string">'安徽'</span>      <span class="token keyword">when</span> province <span class="token operator">like</span> <span class="token string">'fj'</span> <span class="token keyword">then</span> <span class="token string">'福建'</span>      <span class="token keyword">when</span> province <span class="token operator">like</span> <span class="token string">'gd'</span> <span class="token keyword">then</span> <span class="token string">'广东'</span>  <span class="token keyword">else</span> <span class="token string">'m'</span>   <span class="token keyword">end</span> <span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token keyword">case</span>       <span class="token keyword">when</span> province <span class="token operator">like</span> <span class="token string">'ah'</span> <span class="token keyword">then</span> <span class="token string">'安徽'</span>      <span class="token keyword">when</span> province <span class="token operator">like</span> <span class="token string">'fj'</span> <span class="token keyword">then</span> <span class="token string">'福建'</span>      <span class="token keyword">when</span> province <span class="token operator">like</span> <span class="token string">'gd'</span> <span class="token keyword">then</span> <span class="token string">'广东'</span>  <span class="token keyword">else</span> <span class="token string">'m'</span>   <span class="token keyword">end</span> <span class="token keyword">limit</span> <span class="token number">1000</span></code></pre></li></ul><ul><li>范围转换<pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token keyword">case</span> <span class="token keyword">when</span> population <span class="token operator">&lt;</span> <span class="token number">250</span> <span class="token keyword">then</span> <span class="token string">'1'</span>           <span class="token keyword">when</span> population  <span class="token operator">=</span> <span class="token number">250</span> <span class="token operator">and</span>  population <span class="token operator">&lt;</span> <span class="token number">500</span> <span class="token keyword">then</span> <span class="token string">'2'</span><span class="token keyword">else</span> <span class="token boolean">null</span> <span class="token keyword">end</span>  <span class="token keyword">as</span> pop_class<span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">as</span> cntfrom <span class="token keyword">from</span> pop </code></pre></li></ul><h2 id="日期函数"><a href="#日期函数" class="headerlink" title="日期函数"></a>日期函数</h2><ol><li><p><strong>时间函数</strong></p><table><thead><tr><th>函数名</th><th>定义</th></tr></thead><tbody><tr><td>NOW()</td><td>当前时间</td></tr><tr><td>curdate()</td><td>获取当前时刻的日期</td></tr><tr><td>curtime()</td><td>获取当前时刻的时间</td></tr><tr><td>date()</td><td>返回时间的日期部分</td></tr><tr><td>year()</td><td>返回时间的年份</td></tr><tr><td>month()</td><td>返回时间的月份</td></tr><tr><td>day()</td><td>返回日期的天</td></tr><tr><td>hour()</td><td>返回时间的小时</td></tr><tr><td>minute()</td><td>返回时间的分钟</td></tr><tr><td>second()</td><td>返回时间的秒</td></tr><tr><td>week ()</td><td>第几周</td></tr><tr><td>time()</td><td>将日期转换为时间</td></tr><tr><td>dayofweek()</td><td>返回星期几，1为星期天</td></tr><tr><td>dayofyear()</td><td>一年中的第几天</td></tr><tr><td>weekofyear(now())</td><td>获取当前时间是全年的第几周</td></tr><tr><td>quarter()</td><td>获取时间所属的季度</td></tr><tr><td>sec_to_time ( )</td><td>秒数转成时间</td></tr><tr><td>date_add(dt,interval 1 day )</td><td>时间相加</td></tr><tr><td>date_sub(date,INTERVAL expr（时间间隔） type（时间类型，天、月、年）)</td><td>时间相减</td></tr><tr><td>datediff()</td><td>时间的差值</td></tr><tr><td>extract()</td><td>抽取具体的年、月、日</td></tr><tr><td>date_format()</td><td>输出指定时间格式</td></tr></tbody></table></li></ol><ol start="2"><li><strong>extract(unit from datetime)用法</strong></li></ol><ul><li><p>unit的取值说明为：</p><table><thead><tr><th>unit</th><th>说明</th></tr></thead><tbody><tr><td>year</td><td>年</td></tr><tr><td>month</td><td>月</td></tr><tr><td>day</td><td>日</td></tr><tr><td>hour</td><td>小时</td></tr><tr><td>minute</td><td>分钟</td></tr><tr><td>second</td><td>秒</td></tr><tr><td>week</td><td>周</td></tr></tbody></table><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span>   extract<span class="token punctuation">(</span>year <span class="token keyword">from</span> <span class="token string">"2020-07-29 10:31:10"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> y<span class="token punctuation">,</span>  extract<span class="token punctuation">(</span>month <span class="token keyword">from</span>  <span class="token string">"2020-07-29 10:31:10"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> m</code></pre><blockquote><p>输出结果为：</p></blockquote><table><thead><tr><th>y</th><th>m</th></tr></thead><tbody><tr><td>2020</td><td>07</td></tr></tbody></table></li></ul><ol start="3"><li><strong>date_format() 用法</strong></li></ol><ul><li><p>参数可选格式：</p><table><thead><tr><th>主题</th><th>格式</th><th>描述</th></tr></thead><tbody><tr><td>年</td><td>%Y</td><td>4位数字表示的年</td></tr><tr><td>月</td><td>%b</td><td>月份对应的英文缩写</td></tr><tr><td>月</td><td>%M</td><td>月份对应的英文全称</td></tr><tr><td>月</td><td>%m</td><td>以01-12的形式表示的月</td></tr><tr><td>月</td><td>%c</td><td>以1-12的形式表示的月</td></tr><tr><td>日</td><td>%d</td><td>以01-31的形式表示某月中的第几天</td></tr><tr><td>日</td><td>%e</td><td>以1-31的形式表示某月中的第几天</td></tr><tr><td>日</td><td>%D</td><td>用th后缀表示某月中的第几天</td></tr><tr><td>日</td><td>%j</td><td>以001-366的形式表示一年中的第几天</td></tr><tr><td>周</td><td>%a</td><td>星期几对应的英文缩写</td></tr><tr><td>周</td><td>%W</td><td>星期几对应的英文全称</td></tr><tr><td>时</td><td>%H</td><td>以00-23的形式表示的小时</td></tr><tr><td>时</td><td>%h</td><td>以01-12的形式表示的小时</td></tr><tr><td>分</td><td>%i</td><td>以00-59的形式表示的分钟</td></tr><tr><td>秒</td><td>%S</td><td>以00-59的形式表示的秒</td></tr><tr><td>秒</td><td>%f</td><td>微秒</td></tr><tr><td>时分秒</td><td>%T</td><td>返回当前时刻的时分秒（hh:mm:ss)</td></tr></tbody></table><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span>   date_format<span class="token punctuation">(</span><span class="token string">"2020-07-29 10:31:10"</span><span class="token punctuation">,</span> <span class="token string">"%Y-%m-%d"</span><span class="token punctuation">)</span></code></pre></li></ul><ol start="4"><li><strong>datediff-求留存率</strong><pre class=" language-sql"><code class="language-sql"><span class="token keyword">with</span> <span class="token number">a1</span> <span class="token keyword">as</span> <span class="token punctuation">(</span><span class="token keyword">select</span>  hit_date<span class="token punctuation">,</span> user_account<span class="token keyword">from</span>  computer_view<span class="token punctuation">.</span><span class="token keyword">data</span><span class="token keyword">where</span>  hit_date <span class="token operator">between</span> <span class="token string">'2019-04-25'</span> <span class="token operator">and</span> <span class="token string">'2019-05-13'</span> <span class="token operator">and</span>  btn_information <span class="token operator">is</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">a2</span> <span class="token keyword">as</span> <span class="token punctuation">(</span><span class="token keyword">select</span>  hit_date<span class="token punctuation">,</span> user_account<span class="token keyword">from</span>  computer_view<span class="token punctuation">.</span><span class="token keyword">data</span><span class="token keyword">where</span>  hit_date <span class="token operator">between</span> <span class="token string">'2019-04-25'</span> <span class="token operator">and</span> <span class="token string">'2019-05-13'</span> <span class="token operator">and</span>  btn_information <span class="token operator">is</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">)</span><span class="token keyword">select</span> <span class="token number">a1</span><span class="token punctuation">.</span>hit_date<span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">distinct</span> <span class="token number">a1</span><span class="token punctuation">.</span>user_account<span class="token punctuation">)</span> uv<span class="token punctuation">,</span><span class="token comment" spellcheck="true">---一次性求次1日，次3日， 次7日留存，此方法不能计算pv，会造成笛卡尔积</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">distinct</span> <span class="token keyword">case</span> <span class="token keyword">when</span> datediff<span class="token punctuation">(</span><span class="token number">a2</span><span class="token punctuation">.</span>hit_date<span class="token punctuation">,</span> <span class="token number">a1</span><span class="token punctuation">.</span>hit_date<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token keyword">then</span> <span class="token number">a1</span><span class="token punctuation">.</span>user_account <span class="token keyword">else</span> <span class="token boolean">null</span> <span class="token keyword">end</span> <span class="token punctuation">)</span> next_day<span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">distinct</span> <span class="token keyword">case</span> <span class="token keyword">when</span> datediff<span class="token punctuation">(</span><span class="token number">a2</span><span class="token punctuation">.</span>hit_date<span class="token punctuation">,</span> <span class="token number">a1</span><span class="token punctuation">.</span>hit_date<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">3</span> <span class="token keyword">then</span> <span class="token number">a1</span><span class="token punctuation">.</span>user_account <span class="token keyword">else</span> <span class="token boolean">null</span> <span class="token keyword">end</span> <span class="token punctuation">)</span> three_day<span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">distinct</span> <span class="token keyword">case</span> <span class="token keyword">when</span> datediff<span class="token punctuation">(</span><span class="token number">a2</span><span class="token punctuation">.</span>hit_date<span class="token punctuation">,</span> <span class="token number">a1</span><span class="token punctuation">.</span>hit_date<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">7</span> <span class="token keyword">then</span> <span class="token number">a1</span><span class="token punctuation">.</span>user_account <span class="token keyword">else</span> <span class="token boolean">null</span> <span class="token keyword">end</span> <span class="token punctuation">)</span> seven_day<span class="token keyword">from</span> <span class="token number">a1</span> <span class="token keyword">join</span> <span class="token number">a2</span> <span class="token keyword">on</span> <span class="token number">a1</span><span class="token punctuation">.</span>user_account <span class="token operator">=</span> <span class="token number">a2</span><span class="token punctuation">.</span>user_account<span class="token keyword">group</span> <span class="token keyword">by</span> <span class="token number">a1</span><span class="token punctuation">.</span>hit_date<span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token number">a1</span><span class="token punctuation">.</span>hit_date<span class="token keyword">limit</span> <span class="token number">100</span></code></pre></li></ol><!-- - date_add 求留存率```sql---步骤1：统计每天的uv---步骤2： - 统计10-15号每天的次日留存数， 统计次3、7日留存只需将1换为3、7with a1 as (    select         user_account,        hit_date    from         computer_view.data    where         hit_date between  '2018-11-10' and '2018-11-15'),a2 as (        select         user_account,        hit_date    from         computer_view.data    where         hit_date between '2018-11-10' and '2018-11-25')select     a1.hit_date,    count(distinct a1.user_account) as uvfrom    a1 join a2 on a1.user_account = a2.user_accountWHERE       a2.hit_date =  date_add(a1.hit_date, 1) group by     a1.hit_dateorder BY    a1.hit_date --><!-- --步骤3：计算留存率```<!-- - 计算留存率的其他写法-迷神```sql-- 留存sql优化select count(1)from(    select userid, count(1)    from(        select t1.userid,                t1.statdate        from            table1 t1        where            t1.statdate = ${上30天日期}            and t1.statdate <= ${上一天日期}        group by            t1.userid,            t1.statdate        ) s1    group by        userid    having        count(1)  2    ) R1--此sql为一个样例，计算连续跟任意都适用，至于计算第N天，只需要更改下日期过滤条件，变成=$[上N天日期]，=${上一天日期}。 --另外，这种方式适合跑当前周期数据，如果跑历史数据，可以写个循环。当然，最暴力还是直接用userid 关联。--这种写法，更多是针对现在大部分分布式处理平台的特性，尽可能将数据合理均匀分片，每台服务器各自运算自己的，最后汇总。 尽可能少用 count distinct 这种写法，因为无法利用分片的特性。```- 留存率的另一种写法-勇哥```sqlwith a1 as (select    hit_date,    user_account,    count(1) as hit_countfrom     apache_computer_view.client_android_logWHERE     hit_date between '2020-04-01' and  '2020-04-07'    and    btn_navigation  like "%查询办理%"group by    1,2),a2 as (select    hit_date,    user_account,    count(1) as hit_countfrom     apache_computer_view.client_android_logWHERE    hit_date between '2020-04-01' and  '2020-04-07'    and    btn_navigation  like "%查询办理%"group by    1,2)select     a1.hit_date as one,    a2.hit_date as two,    datediff(a2.hit_date, a1.hit_date) as cha,    count(distinct a2.user_account),    sum(a2.hit_count)from    a1 left join a2 on a1.user_account = a2.user_accountgroup by    1,2having    cha > 0order by    1,2``` --><ul><li>计算月留存率的简单写法：筛选出在两个月份出现的用户<pre class=" language-sql"><code class="language-sql"><span class="token keyword">with</span> <span class="token number">a1</span> <span class="token keyword">as</span> <span class="token punctuation">(</span><span class="token keyword">select</span>   user_account<span class="token punctuation">,</span>  <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">distinct</span> month <span class="token punctuation">(</span>hit_date<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token number">c</span><span class="token keyword">from</span>  android_log <span class="token keyword">where</span>    hit_date <span class="token operator">between</span> <span class="token string">'2019-03-01'</span> <span class="token operator">and</span> <span class="token string">'2019-04-31'</span><span class="token keyword">group</span> <span class="token keyword">by</span> user_account<span class="token keyword">having</span> <span class="token number">c</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token keyword">union</span> <span class="token keyword">select</span>   user_account<span class="token punctuation">,</span>  <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">distinct</span> month <span class="token punctuation">(</span>hit_date<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token number">c</span><span class="token keyword">from</span>   ios_log <span class="token keyword">where</span>    hit_date <span class="token operator">between</span> <span class="token string">'2019-03-01'</span> <span class="token operator">and</span> <span class="token string">'2019-04-31'</span><span class="token keyword">group</span> <span class="token keyword">by</span> user_account<span class="token keyword">having</span> <span class="token number">c</span> <span class="token operator">=</span> <span class="token number">2</span>  <span class="token punctuation">)</span><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">distinct</span> user_account<span class="token punctuation">)</span> <span class="token keyword">as</span> uv <span class="token keyword">from</span> <span class="token number">a1</span></code></pre></li></ul><h2 id="数据分组与透视"><a href="#数据分组与透视" class="headerlink" title="数据分组与透视"></a>数据分组与透视</h2><ol><li><p><strong>对分组后的数据进行聚合运算</strong></p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span>      year<span class="token punctuation">(</span>ymd<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token function">avg</span><span class="token punctuation">(</span>price_close<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">--- 对结果进行分类</span><span class="token keyword">from</span>      stocks<span class="token keyword">where</span>      exchange <span class="token operator">=</span> <span class="token string">'nasdaq'</span><span class="token keyword">group</span> <span class="token keyword">by</span>      year<span class="token punctuation">(</span>ymd<span class="token punctuation">)</span><span class="token keyword">order</span> <span class="token keyword">by</span>      year<span class="token punctuation">(</span>ymd<span class="token punctuation">)</span> <span class="token keyword">desc</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">--desc 从高到低排列</span></code></pre></li><li><p><strong>对聚合后的数据进行条件筛选</strong></p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span>      deparment<span class="token punctuation">,</span>  <span class="token function">avg</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token keyword">as</span> average <span class="token keyword">from</span>       salary_info<span class="token keyword">group</span> <span class="token keyword">by</span>      deparment <span class="token keyword">having</span>      average <span class="token operator">></span> <span class="token number">3000</span><span class="token comment" spellcheck="true">--- having 子句来限制输出结果--- 查找平均工资大于3000的部门</span></code></pre></li></ol><ul><li>having 与 where 的区别：<blockquote><p>Where 是一个约束声明，使用Where约束来自数据库的数据，Where是在结果返回之前起作用的，Where中不能使用聚合函数。<br>Having是一个过滤声明，是在查询返回结果集以后对查询结果进行的过滤操作，在Having中可以使用聚合函数。</p></blockquote></li></ul><ol start="3"><li><p><strong>group_concat()函数</strong></p><blockquote><p>对以下数据进行分组处理</p></blockquote><table><thead><tr><th>id</th><th>score</th></tr></thead><tbody><tr><td>1</td><td>78</td></tr><tr><td>2</td><td>52</td></tr><tr><td>1</td><td>69</td></tr><tr><td>2</td><td>45</td></tr></tbody></table><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> id<span class="token punctuation">,</span> group_concat<span class="token punctuation">(</span>score<span class="token punctuation">)</span> <span class="token keyword">as</span> g_score<span class="token keyword">from</span>  <span class="token keyword">tables</span></code></pre><blockquote><p>得到结果如下</p></blockquote><table><thead><tr><th>id</th><th>score</th></tr></thead><tbody><tr><td>1</td><td>78,69</td></tr><tr><td>2</td><td>52,45</td></tr></tbody></table></li></ol><ol start="4"><li><strong>rollup 函数用法</strong></li></ol><ul><li><p>需求背景： 求每个省份的销量，然后求每个省份下城市的销量，汇总到一张表中。</p><blockquote><p>写法1：</p></blockquote><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span>  province<span class="token punctuation">,</span> <span class="token boolean">null</span> <span class="token keyword">as</span> city<span class="token punctuation">,</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">order</span><span class="token punctuation">)</span><span class="token keyword">from</span>  table_sales<span class="token keyword">group</span> <span class="token keyword">by</span>  province<span class="token keyword">union</span> <span class="token keyword">all</span> <span class="token keyword">select</span>  province<span class="token punctuation">,</span> city<span class="token punctuation">,</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">order</span><span class="token punctuation">)</span><span class="token keyword">from</span>  table_sales<span class="token keyword">group</span> <span class="token keyword">by</span>  province<span class="token punctuation">,</span> city</code></pre><blockquote><p>写法2：</p></blockquote><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span>   province<span class="token punctuation">,</span> city<span class="token punctuation">,</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">order</span><span class="token punctuation">)</span><span class="token keyword">from</span>  table_sales<span class="token keyword">group</span> <span class="token keyword">by</span>   province<span class="token punctuation">,</span>city<span class="token keyword">with rollup</span></code></pre><blockquote><p>得到结果如下：</p></blockquote><table><thead><tr><th>province</th><th>city</th><th>sum(order)</th></tr></thead><tbody><tr><td>陕西</td><td>null</td><td>50</td></tr><tr><td>陕西</td><td>西安</td><td>20</td></tr><tr><td>陕西</td><td>渭南</td><td>10</td></tr><tr><td>陕西</td><td>汉中</td><td>20</td></tr><tr><td>北京</td><td>北京</td><td>24</td></tr><tr><td>null</td><td>null</td><td>74</td></tr></tbody></table></li></ul><ol start="5"><li>数据透视表</li></ol><ul><li><p>将下表进行按照年份和季度进行透视汇总</p><table><thead><tr><th>年</th><th>季度</th><th>销售量</th></tr></thead><tbody><tr><td>1991</td><td>1</td><td>11</td></tr><tr><td>1991</td><td>2</td><td>12</td></tr><tr><td>1991</td><td>3</td><td>13</td></tr><tr><td>1991</td><td>4</td><td>14</td></tr><tr><td>1992</td><td>1</td><td>21</td></tr><tr><td>1992</td><td>2</td><td>22</td></tr><tr><td>1992</td><td>3</td><td>23</td></tr><tr><td>1992</td><td>4</td><td>24</td></tr></tbody></table><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span>  年<span class="token punctuation">,</span><span class="token function">sum</span><span class="token punctuation">(</span> <span class="token keyword">case</span> <span class="token keyword">when</span>  季度 <span class="token operator">=</span> <span class="token number">1</span> <span class="token keyword">then</span> 销售量  <span class="token keyword">else</span> <span class="token boolean">null</span> <span class="token keyword">end</span> <span class="token punctuation">)</span> 一季度<span class="token punctuation">,</span><span class="token function">sum</span><span class="token punctuation">(</span> <span class="token keyword">case</span> <span class="token keyword">when</span> 季度 <span class="token operator">=</span> <span class="token number">2</span> <span class="token keyword">then</span> 销售量 <span class="token keyword">else</span> <span class="token boolean">null</span> <span class="token keyword">end</span> <span class="token punctuation">)</span> <span class="token keyword">as</span> 二季度<span class="token punctuation">,</span><span class="token function">sum</span><span class="token punctuation">(</span> <span class="token keyword">case</span> <span class="token keyword">when</span> 季度 <span class="token operator">=</span> <span class="token number">3</span> <span class="token keyword">then</span> 销售量 <span class="token keyword">else</span> <span class="token boolean">null</span> <span class="token keyword">end</span> <span class="token punctuation">)</span> <span class="token keyword">as</span>  三季度<span class="token punctuation">,</span><span class="token function">sum</span><span class="token punctuation">(</span> <span class="token keyword">case</span> <span class="token keyword">when</span> 季度 <span class="token operator">=</span> <span class="token number">4</span> <span class="token keyword">then</span> 销售量 <span class="token keyword">else</span> <span class="token boolean">null</span> <span class="token keyword">end</span> <span class="token punctuation">)</span> <span class="token keyword">as</span> 四季度<span class="token keyword">from</span> page <span class="token keyword">group</span> <span class="token keyword">by</span> 年<span class="token keyword">order</span> <span class="token keyword">by</span> 年</code></pre><blockquote><p>查询结果如下：</p></blockquote><table><thead><tr><th>年</th><th>一季度</th><th>二季度</th><th>三季度</th><th>四季度</th></tr></thead><tbody><tr><td>1991</td><td>11</td><td>12</td><td>13</td><td>14</td></tr><tr><td>1992</td><td>21</td><td>22</td><td>23</td><td>24</td></tr></tbody></table></li></ul><ul><li><p>统计各部门男女分别有多少人</p><table><thead><tr><th>姓名</th><th>部门</th><th>性别</th></tr></thead><tbody><tr><td>甲</td><td>A</td><td>男</td></tr><tr><td>乙</td><td>A</td><td>男</td></tr><tr><td>丙</td><td>B</td><td>女</td></tr><tr><td>丁</td><td>A</td><td>女</td></tr><tr><td>张</td><td>B</td><td>男</td></tr><tr><td>赵</td><td>B</td><td>女</td></tr></tbody></table><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token string">'部门'</span><span class="token punctuation">,</span><span class="token function">sum</span><span class="token punctuation">(</span> <span class="token keyword">case</span> <span class="token keyword">when</span> 性别 <span class="token operator">=</span> <span class="token string">'男'</span> <span class="token keyword">then</span> <span class="token number">1</span>  <span class="token keyword">else</span> <span class="token boolean">null</span> <span class="token keyword">end</span> <span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">'男'</span><span class="token punctuation">,</span><span class="token function">sum</span><span class="token punctuation">(</span> <span class="token keyword">case</span> <span class="token keyword">when</span> 性别 <span class="token operator">=</span> <span class="token string">'女'</span> <span class="token keyword">then</span> <span class="token number">1</span> <span class="token keyword">else</span> <span class="token boolean">null</span> <span class="token keyword">end</span> <span class="token punctuation">)</span> <span class="token keyword">as</span>  <span class="token string">'女'</span><span class="token keyword">from</span> table1<span class="token keyword">group</span> <span class="token keyword">by</span> <span class="token string">'部门'</span></code></pre><blockquote><p>得到结果如下:</p></blockquote><table><thead><tr><th>部门</th><th>男</th><th>女</th></tr></thead><tbody><tr><td>A</td><td>2</td><td>1</td></tr><tr><td>B</td><td>1</td><td>2</td></tr></tbody></table></li></ul><!-- `rollup` 函数输出结果，不会有 `null, null, null, city` 值， 和 `cube` 的区别在于： `cube` 是维度更细的统计，假设数据有 `n` 个维度， 那么 `rollup` 会有 `n` 个聚合，`cube` 会有 `2n` 个聚合。 --> <!-- >解法1：分别写5个sql，这种方法太低效了， 还需要在excel中进行合并。 ```sqlselect count(order_id)  as sales from table1 ---全国成交量select area, count(order_id) as sales from table1 group by area--大区成交量select area, province, count(order_id) as sales from table1 group by area, province--省成交量select area, province, city, count(order_id) as sales from table1 group by  area, province, city---城市成交量select area, province, city, shop, count(order_id) as sales from table1 group by area, province, city, shop--店铺成交量``` >解法2：通过 union 和 union all 对查询结果进行纵向合并---sql中有很多 null, 这是因为 union all 拼接的两个表的列数需要相等。 ```sqlselect null, null, null, null, null, count(order_id)  as sales from table1 ---全国成交量union all select null, null, null,null,  area, count(order_id) as sales from table1 group by area--大区成交量union all select null, null,null,  area, province, count(order_id) as sales from table1 group by area, province--省成交量union all select null, null, area, province, city, count(order_id) as sales from table1 group by  area, province, city---城市成交量union allselect null,  area, province, city, shop, count(order_id) as sales from table1 group by area, province, city, shop --店铺成交量```结果如下：![sql结果](https://i.loli.net/2019/06/10/5cfe6c219ca3f57084.png)解法3：用`grouping sets`来根据不同维度组合进行聚合```sqlselect     null, area, province, city, shopfrom     table1group by     null, area, province, city, shopgrouping set    ( null, (null, area), (null, area,province), (null, area, province, city), (null,area, province, city,shop) )```得到结果与利用 `union all`拼接结果相同。`group by`后面的字段表示要分组聚合的全部字段， `grouping sets`后面为 `group by` 后面各种字段的组合。 --><!-- 解法4：`cube`函数， 对`group by`的维度的所有组合进行聚合。```sqlselect      area, province, city, shopfrom     table1group by      area, province, city, shopwith cube````cube` 会先对全部数据进行聚合，即 `null,null,null,null` 进行聚合，(只是不像解法3一样，显示null列， 如需显示只要加入null即可） 然后对 `area, null, null, null` 进行聚合，....... --><hr><h2 id="窗口函数"><a href="#窗口函数" class="headerlink" title="窗口函数"></a>窗口函数</h2><table><thead><tr><th>函数名</th><th>定义</th></tr></thead><tbody><tr><td>over()</td><td>指定分析函数工作的数据窗口大小，这个数据窗口大小可能会随着行的变化而变化</td></tr><tr><td><strong>常跟的函数</strong></td><td><strong>说明</strong></td></tr><tr><td>current row</td><td>当前行</td></tr><tr><td>n preceding</td><td>往前n行数据</td></tr><tr><td>n following</td><td>往后n行数据</td></tr><tr><td>unbounded</td><td>起点</td></tr><tr><td>uvbounded preceding</td><td>表示从前面的起点开始</td></tr><tr><td>unbounded following</td><td>表示到后面的终点</td></tr><tr><td>lag(col, n)</td><td>往前第n行数据</td></tr><tr><td>lead(col, n)</td><td>往后第n行数据</td></tr><tr><td>ntile(n)</td><td>把有序分区中的行分发到指定数据的组中， 各个组有编号，编号从1开始，ntile返回此行所属组的编号</td></tr><tr><td>first_value()</td><td>返回组中数据窗口的第一个值</td></tr><tr><td>last_value()</td><td>返回组中数据窗口的最后一个值</td></tr></tbody></table><ol><li><p><strong>聚合函数+over()</strong></p><blockquote><p>商业表如下</p></blockquote><table><thead><tr><th>shop_name</th><th>order_date</th><th>cost</th></tr></thead><tbody><tr><td>A</td><td>2017-01-01</td><td>10</td></tr><tr><td>B</td><td>2017-01-01</td><td>15</td></tr><tr><td>C</td><td>2017-01-01</td><td>20</td></tr><tr><td>A</td><td>2017-01-02</td><td>25</td></tr><tr><td>B</td><td>2017-01-02</td><td>25</td></tr><tr><td>C</td><td>2017-01-02</td><td>20</td></tr><tr><td>A</td><td>2017-01-03</td><td>15</td></tr><tr><td>B</td><td>2017-01-03</td><td>10</td></tr><tr><td>C</td><td>2017-01-03</td><td>20</td></tr></tbody></table></li></ol><ul><li><p>求每个店铺的每天效率和全部总销量</p><blockquote><p>写法1</p></blockquote><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span>  shop_name<span class="token punctuation">,</span>  order_date<span class="token punctuation">,</span>  cost<span class="token punctuation">,</span>  <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">sum</span><span class="token punctuation">(</span>cost<span class="token punctuation">)</span> <span class="token keyword">from</span> business<span class="token punctuation">)</span> <span class="token keyword">as</span> sum_cost<span class="token keyword">from</span>   business</code></pre><blockquote><p>写法2</p></blockquote><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span>   shop_name<span class="token punctuation">,</span>  order_date<span class="token punctuation">,</span>  cost<span class="token punctuation">,</span>  <span class="token function">sum</span><span class="token punctuation">(</span>cost<span class="token punctuation">)</span><span class="token keyword">over</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> sum_cost<span class="token keyword">from</span>   business</code></pre><blockquote><p>得到结果如下</p></blockquote><table><thead><tr><th>shop_name</th><th>order_date</th><th>cost</th><th>sum_cost</th></tr></thead><tbody><tr><td>A</td><td>2017-01-01</td><td>10</td><td>150</td></tr><tr><td>B</td><td>2017-01-01</td><td>15</td><td>150</td></tr><tr><td>C</td><td>2017-01-01</td><td>20</td><td>150</td></tr><tr><td>A</td><td>2017-01-02</td><td>25</td><td>150</td></tr><tr><td>B</td><td>2017-01-02</td><td>25</td><td>150</td></tr><tr><td>C</td><td>2017-01-02</td><td>20</td><td>150</td></tr><tr><td>A</td><td>2017-01-03</td><td>15</td><td>150</td></tr><tr><td>B</td><td>2017-01-03</td><td>10</td><td>150</td></tr><tr><td>C</td><td>2017-01-03</td><td>20</td><td>150</td></tr></tbody></table></li></ul><ol start="2"><li><strong>partition by 子句</strong></li></ol><ul><li><p>查询各店铺日销量明细及各店铺平均每日销量</p><blockquote><p>写法1</p></blockquote><pre class=" language-sql"><code class="language-sql"><span class="token keyword">with</span> <span class="token number">a1</span> <span class="token keyword">as</span> <span class="token punctuation">(</span>  <span class="token keyword">select</span>       shop_name<span class="token punctuation">,</span>order_name<span class="token punctuation">,</span> cost  <span class="token keyword">from</span>       business<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">a2</span> <span class="token keyword">as</span> <span class="token punctuation">(</span>  <span class="token keyword">select</span>       shop_name<span class="token punctuation">,</span>      <span class="token function">avg</span><span class="token punctuation">(</span>cost<span class="token punctuation">)</span> <span class="token keyword">as</span> avg_cost  <span class="token keyword">from</span>      business  <span class="token keyword">group</span> <span class="token keyword">by</span>       shop_name<span class="token punctuation">)</span><span class="token keyword">select</span>   <span class="token number">a1</span><span class="token punctuation">.</span>shop_name<span class="token punctuation">,</span>  <span class="token number">a1</span><span class="token punctuation">.</span>order_name<span class="token punctuation">,</span>  <span class="token number">a1</span><span class="token punctuation">.</span>cost<span class="token punctuation">,</span>  <span class="token number">a2</span><span class="token punctuation">.</span>avg_cost<span class="token keyword">from</span>   <span class="token number">a1</span> <span class="token keyword">left</span> <span class="token keyword">join</span> <span class="token number">a2</span> <span class="token keyword">on</span> <span class="token number">a1</span><span class="token punctuation">.</span>shop_name <span class="token operator">=</span> <span class="token number">a2</span><span class="token punctuation">.</span>shop_name</code></pre><blockquote><p>写法2</p></blockquote><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span>   shop_name<span class="token punctuation">,</span>  order_name<span class="token punctuation">,</span>  cost<span class="token punctuation">,</span>  <span class="token function">avg</span><span class="token punctuation">(</span>cost<span class="token punctuation">)</span><span class="token keyword">over</span><span class="token punctuation">(</span><span class="token keyword">partition</span> <span class="token keyword">by</span> shop_name<span class="token punctuation">)</span> <span class="token keyword">as</span> avg_cost<span class="token keyword">from</span>  business</code></pre><blockquote><p>输出结果如下：</p></blockquote><table><thead><tr><th>shop_name</th><th>order_date</th><th>cost</th><th>age_cost</th></tr></thead><tbody><tr><td>A</td><td>2017-01-01</td><td>10</td><td>16.7</td></tr><tr><td>B</td><td>2017-01-01</td><td>15</td><td>16.7</td></tr><tr><td>C</td><td>2017-01-01</td><td>20</td><td>20</td></tr><tr><td>A</td><td>2017-01-02</td><td>25</td><td>16.7</td></tr><tr><td>B</td><td>2017-01-02</td><td>25</td><td>16.7</td></tr><tr><td>C</td><td>2017-01-02</td><td>20</td><td>20</td></tr><tr><td>A</td><td>2017-01-03</td><td>15</td><td>16.7</td></tr><tr><td>B</td><td>2017-01-03</td><td>10</td><td>16.7</td></tr><tr><td>C</td><td>2017-01-03</td><td>20</td><td>20</td></tr></tbody></table></li></ul><ol start="3"><li>order by 子句</li></ol><ul><li><p>求不同店铺每日明细，及按照日期进行累加</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span>   shop_name<span class="token punctuation">,</span>  order_name<span class="token punctuation">,</span>  cost<span class="token punctuation">,</span>  <span class="token function">sum</span><span class="token punctuation">(</span>cost<span class="token punctuation">)</span><span class="token keyword">over</span><span class="token punctuation">(</span><span class="token keyword">partition</span> <span class="token keyword">by</span> shop_name <span class="token keyword">order</span> <span class="token keyword">by</span> order_date<span class="token punctuation">)</span>  <span class="token keyword">as</span> sum_cost  <span class="token comment" spellcheck="true">---只根据日期进行累加，不区分店铺。先排序，之后按照顺序，从起到到当前行进行求和</span>  <span class="token comment" spellcheck="true">---sum(cost)over( order by orderdate   rows between unbounded preceding and  current row)</span>  <span class="token comment" spellcheck="true">--- 按照日期进行排序，并将当前日期和前一天、后一天数据求和</span>  <span class="token comment" spellcheck="true">---sum(cost) over(order by  orderdate  rows between 1   preceding  between  1 following ) </span><span class="token keyword">from</span>   business  <span class="token comment" spellcheck="true">--- sum没有问题，但是count(distinct user_account) 就不能用这种方法</span></code></pre><blockquote><p>输出结果如下：</p></blockquote><table><thead><tr><th>shop_name</th><th>order_date</th><th>cost</th><th>age_cost</th></tr></thead><tbody><tr><td>A</td><td>2017-01-01</td><td>10</td><td>10</td></tr><tr><td>A</td><td>2017-01-02</td><td>25</td><td>35</td></tr><tr><td>A</td><td>2017-01-03</td><td>15</td><td>50</td></tr><tr><td>B</td><td>2017-01-01</td><td>15</td><td>15</td></tr><tr><td>B</td><td>2017-01-02</td><td>25</td><td>40</td></tr><tr><td>B</td><td>2017-01-03</td><td>10</td><td>50</td></tr><tr><td>C</td><td>2017-01-01</td><td>20</td><td>60</td></tr><tr><td>C</td><td>2017-01-02</td><td>20</td><td>60</td></tr><tr><td>C</td><td>2017-01-03</td><td>20</td><td>60</td></tr></tbody></table></li></ul><!-- - 求每个人将按照日期进行累加的消费金额```sqlselect name, sum(cost) over ( partition by name order by  orderdate  row between unbounded preceding and current row) from  business group by name ```- 要将cost按照日期进行倒序累加```sql select *,sum(cost) over ( order by orderdate desc row between unbounded preceding and current row)from business ``` --><ol start="4"><li>ntile()函数</li></ol><ul><li><strong><a href="https://www.cnblogs.com/52xf/p/4209211.html" target="_blank" rel="noopener">ntile函数详解</a></strong> <blockquote><p>ntile函数可以将有序数据，根据指定的组数进行分组处理。 编号从1开始，对于每一行，ntile将返回此行所属的组编号。 ntile函数的分组依据：</p><ol><li>检查能不能对所有满足条件的记录进行平均分组，若能则直接平均分配完成分组。</li><li>若不能，则会先分出一个组，此组个数为（总个数/总组数）+1。</li><li>分配之后系统会继续比较余下的记录数与未分配的组数能不能进行平均分配，若不能，则根据上面条件再分配。</li></ol><ul><li>例如：将6个记录分为4组， 不能平均分配则，第一组记录数为 （6/4)+1 = 2条记录。剩余4条记录分为3组，不能平均分配，则第二组记录数为（4/3)+1=2条记录。剩余2条记录分为2组，则剩余2组各1条记录。</li></ul></blockquote></li></ul><ul><li><p>将表分成三组</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span>    <span class="token keyword">select</span>   shop_name<span class="token punctuation">,</span>  order_name<span class="token punctuation">,</span>  cost<span class="token punctuation">,</span>  ntile<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">over</span> <span class="token keyword">as</span> cut_group<span class="token keyword">from</span>   business</code></pre><blockquote><p>输出结果如下</p></blockquote><table><thead><tr><th>shop_name</th><th>order_date</th><th>cost</th><th>cut_group</th></tr></thead><tbody><tr><td>A</td><td>2017-01-01</td><td>10</td><td>1</td></tr><tr><td>B</td><td>2017-01-01</td><td>15</td><td>1</td></tr><tr><td>C</td><td>2017-01-01</td><td>20</td><td>1</td></tr><tr><td>A</td><td>2017-01-02</td><td>25</td><td>2</td></tr><tr><td>B</td><td>2017-01-02</td><td>25</td><td>2</td></tr><tr><td>C</td><td>2017-01-02</td><td>20</td><td>2</td></tr><tr><td>A</td><td>2017-01-03</td><td>15</td><td>3</td></tr><tr><td>B</td><td>2017-01-03</td><td>10</td><td>3</td></tr><tr><td>C</td><td>2017-01-03</td><td>20</td><td>3</td></tr></tbody></table></li><li><p>将各个店铺销量进行升序排序后进行内部切分</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span>    <span class="token keyword">select</span>   shop_name<span class="token punctuation">,</span>  order_name<span class="token punctuation">,</span>  cost<span class="token punctuation">,</span>  ntile<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">over</span><span class="token punctuation">(</span><span class="token keyword">partition</span> <span class="token keyword">by</span> shop_name <span class="token keyword">order</span> <span class="token keyword">by</span> cost<span class="token punctuation">)</span> <span class="token keyword">as</span> cut_group<span class="token keyword">from</span>   business</code></pre><blockquote><p>输出结果如下</p></blockquote><table><thead><tr><th>shop_name</th><th>order_date</th><th>cost</th><th>age_cost</th></tr></thead><tbody><tr><td>A</td><td>2017-01-01</td><td>10</td><td>1</td></tr><tr><td>A</td><td>2017-01-02</td><td>25</td><td>2</td></tr><tr><td>A</td><td>2017-01-03</td><td>15</td><td>3</td></tr><tr><td>B</td><td>2017-01-01</td><td>15</td><td>1</td></tr><tr><td>B</td><td>2017-01-02</td><td>25</td><td>2</td></tr><tr><td>B</td><td>2017-01-03</td><td>10</td><td>3</td></tr><tr><td>C</td><td>2017-01-01</td><td>20</td><td>1</td></tr><tr><td>C</td><td>2017-01-02</td><td>20</td><td>2</td></tr><tr><td>C</td><td>2017-01-03</td><td>20</td><td>3</td></tr></tbody></table></li></ul><ul><li>查询前50%时间的订单信息<pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span>  <span class="token operator">*</span>  <span class="token keyword">from</span>   <span class="token punctuation">(</span><span class="token keyword">select</span>       name<span class="token punctuation">,</span>      orderdate<span class="token punctuation">,</span>      cost<span class="token punctuation">,</span>      ntile<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">over</span><span class="token punctuation">(</span><span class="token keyword">order</span> <span class="token keyword">by</span> orderdate<span class="token punctuation">)</span> <span class="token keyword">as</span> git      <span class="token keyword">from</span>       business<span class="token punctuation">)</span><span class="token keyword">where</span> git <span class="token operator">=</span> <span class="token number">1</span></code></pre></li></ul><ol start="5"><li><strong>排序函数</strong></li></ol><ul><li><p>SQl 中用于排序的函数有：rank、dense_rank、row_number、ntile函数,其语法为：</p><pre class=" language-sql"><code class="language-sql">rank<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">over</span> <span class="token punctuation">(</span> <span class="token keyword">partition</span> <span class="token keyword">by</span> A <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> B  <span class="token keyword">desc</span> <span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">---1、1、3</span>dense_rank<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">over</span> <span class="token punctuation">(</span><span class="token keyword">partition</span> <span class="token keyword">by</span> A <span class="token keyword">order</span> <span class="token keyword">by</span> B <span class="token keyword">desc</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">--- 1、1、2</span>row_number<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">over</span> <span class="token punctuation">(</span><span class="token keyword">partition</span> <span class="token keyword">by</span> A <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token number">b</span> <span class="token keyword">desc</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">--1、2、3</span>ntile<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">over</span> <span class="token punctuation">(</span><span class="token keyword">partition</span> <span class="token keyword">by</span> A <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token number">b</span> <span class="token keyword">desc</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">--分组</span></code></pre></li></ul><ul><li><p>找出各省点击人数Top10的按钮？</p><blockquote><ol><li>取出 省份、按钮和 uv;</li><li>各省分组内，按照uv进行从大到小排序，并输出一列排序序号;</li><li>根据排序序号，取出排序前10的按钮和省份。 </li></ol></blockquote><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> province<span class="token punctuation">,</span>nbtn_name<span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">select</span>   province<span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">--省份</span>  nbtn_name<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">--按钮 </span>  uv<span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">--uv</span>  dense_rank<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">over</span><span class="token punctuation">(</span><span class="token keyword">partition</span> <span class="token keyword">by</span> province <span class="token keyword">order</span> <span class="token keyword">by</span> uv  <span class="token keyword">DESC</span><span class="token punctuation">)</span> <span class="token keyword">as</span> ran <span class="token comment" spellcheck="true">--排序</span><span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">select</span>  province<span class="token punctuation">,</span>  nbtn_name<span class="token punctuation">,</span>  <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">distinct</span> user_account<span class="token punctuation">)</span> <span class="token keyword">as</span> uv<span class="token keyword">from</span>   table1<span class="token keyword">where</span>   nbtn_name <span class="token operator">is</span> <span class="token operator">not</span> <span class="token boolean">null</span>    <span class="token operator">and</span>   hit_date <span class="token operator">=</span> <span class="token string">'2020-06-01'</span><span class="token keyword">group</span> <span class="token keyword">by</span>   province<span class="token punctuation">,</span>  nbtn_name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">where</span> ran <span class="token operator">between</span> <span class="token string">'1'</span> <span class="token operator">and</span> <span class="token string">'10'</span></code></pre></li><li><p>求连续3个月活跃的用户数</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">distinct</span> user_account<span class="token punctuation">)</span> <span class="token keyword">as</span> uv <span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">select</span> dt<span class="token punctuation">,</span>user_account<span class="token punctuation">,</span>dense_rank<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">over</span><span class="token punctuation">(</span><span class="token keyword">partition</span> <span class="token keyword">by</span> user_account <span class="token keyword">order</span> <span class="token keyword">by</span> dt<span class="token punctuation">)</span> <span class="token keyword">as</span> raws<span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">select</span> user_account<span class="token punctuation">,</span>month<span class="token punctuation">(</span>hit_date<span class="token punctuation">)</span>  <span class="token keyword">as</span> dt <span class="token keyword">from</span> table1<span class="token keyword">where</span> hit_date <span class="token operator">between</span> <span class="token string">'2020-04-01'</span> <span class="token operator">and</span> <span class="token string">'2020-06-31'</span><span class="token keyword">group</span> <span class="token keyword">by</span> user_account<span class="token punctuation">,</span> dt<span class="token punctuation">)</span> <span class="token number">a1</span><span class="token punctuation">)</span> <span class="token number">a2</span><span class="token punctuation">)</span><span class="token keyword">where</span> <span class="token number">a2</span><span class="token punctuation">.</span>raws <span class="token operator">=</span> <span class="token number">3</span></code></pre></li><li><p>求4月连续7天进行签到的用户数</p><blockquote><ol><li>求出手机号和日期，并去重</li><li>根据手机号，对日期进行排序，并且日期和排序进行相减</li><li>对相减后得到的日期进行统计，并计算数量大于7的用户</li><li>对数量大于7的用户进行去重处理</li></ol></blockquote><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">distinct</span> user_account<span class="token punctuation">)</span> <span class="token keyword">as</span> uv <span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">select</span>   user_account<span class="token punctuation">,</span>  raw<span class="token punctuation">,</span>  <span class="token function">count</span><span class="token punctuation">(</span>raw<span class="token punctuation">)</span> <span class="token keyword">as</span> raw_1<span class="token keyword">from</span> <span class="token punctuation">(</span>      <span class="token keyword">select</span>           user_account<span class="token punctuation">,</span>              hit_date<span class="token punctuation">,</span>          date_sub<span class="token punctuation">(</span>hit_date<span class="token punctuation">,</span> row_number<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">over</span><span class="token punctuation">(</span><span class="token keyword">partition</span> <span class="token keyword">by</span> user_account <span class="token keyword">order</span> <span class="token keyword">by</span> hit_date<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token keyword">as</span> raw  <span class="token keyword">from</span>       <span class="token punctuation">(</span>      <span class="token keyword">select</span>          user_account<span class="token punctuation">,</span>          hit_date      <span class="token keyword">from</span>           apache_computer_view<span class="token punctuation">.</span>client_android_log      <span class="token keyword">where</span>           hit_date <span class="token operator">between</span> <span class="token string">'2020-04-01'</span> <span class="token operator">and</span> <span class="token string">'2020-04-31'</span>      <span class="token keyword">group</span> <span class="token keyword">by</span>           user_account<span class="token punctuation">,</span>          hit_date<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">group</span> <span class="token keyword">by</span>   user_account<span class="token punctuation">,</span>  raw<span class="token punctuation">)</span><span class="token keyword">where</span> raw_1 <span class="token operator">>=</span> <span class="token number">7</span></code></pre></li></ul><ol start="6"><li><strong>lag()和lead()函数</strong></li></ol><ul><li><p>查询顾客的上次购买时间</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span><span class="token punctuation">,</span>  lag<span class="token punctuation">(</span>orderdate<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">over</span><span class="token punctuation">(</span> partation <span class="token keyword">by</span> name <span class="token keyword">order</span> <span class="token keyword">by</span>  orderdate<span class="token punctuation">)</span><span class="token keyword">from</span>   business</code></pre></li><li><p>查询顾客上次购买的时间, 与下次购买时间。相邻两个时间戳如何相减，求时间</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span><span class="token punctuation">,</span>  lag<span class="token punctuation">(</span>orderdate<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">over</span> <span class="token punctuation">(</span><span class="token keyword">partition</span> <span class="token keyword">by</span> name <span class="token keyword">order</span> <span class="token keyword">by</span> orderdate<span class="token punctuation">)</span> <span class="token keyword">as</span> up_date<span class="token punctuation">,</span>  lead<span class="token punctuation">(</span>orderdate<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">over</span> <span class="token punctuation">(</span><span class="token keyword">partition</span> <span class="token keyword">by</span> name <span class="token keyword">order</span> <span class="token keyword">by</span> orderdate<span class="token punctuation">)</span> <span class="token keyword">as</span> downdate<span class="token keyword">from</span>   business </code></pre></li></ul><ol start="7"><li><strong>first_value()和last_value函数</strong></li></ol><ul><li>查询用户第一次购买时间和最后一次购买时间<pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span>   <span class="token operator">*</span><span class="token punctuation">,</span>  first_value<span class="token punctuation">(</span>orderdate<span class="token punctuation">)</span> <span class="token keyword">over</span><span class="token punctuation">(</span><span class="token keyword">partition</span> <span class="token keyword">by</span> name <span class="token keyword">order</span> <span class="token keyword">by</span>  orderdate<span class="token punctuation">)</span> <span class="token keyword">as</span> first_date<span class="token punctuation">,</span>  last_value<span class="token punctuation">(</span>orderdate<span class="token punctuation">)</span> <span class="token keyword">over</span> <span class="token punctuation">(</span><span class="token keyword">partition</span> <span class="token keyword">by</span> name <span class="token keyword">order</span> <span class="token keyword">by</span> orderdate<span class="token punctuation">)</span> <span class="token keyword">as</span> last_date<span class="token keyword">from</span>   business</code></pre></li></ul><h2 id="多表连接"><a href="#多表连接" class="headerlink" title="多表连接"></a>多表连接</h2><ol><li><p><strong>join</strong></p><blockquote><p>Hive中Join的关联键必须在ON ()中指定，不能在Where中指定,ON 子句指定了两个表间数据进行连接的条件。</p></blockquote></li></ol><p><img src="https://i.loli.net/2019/06/11/5cffb911ad8e183153.png" alt="join"></p><ul><li><p>对于多张表进行连接查询</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span>  <span class="token operator">*</span><span class="token keyword">FROM</span>  <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">a</span> <span class="token keyword">JOIN</span> <span class="token number">b</span> <span class="token keyword">ON</span> <span class="token number">a</span><span class="token punctuation">.</span>ymd <span class="token operator">=</span> <span class="token number">b</span><span class="token punctuation">.</span>ymd<span class="token punctuation">)</span>    <span class="token keyword">JOIN</span> <span class="token number">c</span> <span class="token keyword">ON</span> <span class="token number">a</span><span class="token punctuation">.</span>ymd <span class="token operator">=</span> <span class="token number">c</span><span class="token punctuation">.</span>ymd<span class="token punctuation">)</span>    <span class="token keyword">join</span> <span class="token number">d</span> <span class="token keyword">on</span> <span class="token number">a</span><span class="token punctuation">.</span>ymd <span class="token operator">=</span> <span class="token number">d</span><span class="token punctuation">.</span>ymd<span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">---为什么条件内不将表 b 和表 c 进行连接操作， 因为 Hive总是按照从左到右的顺序来执行</span><span class="token keyword">WHERE</span>   <span class="token number">a</span><span class="token punctuation">.</span> symbol <span class="token operator">=</span> <span class="token string">'Apple'</span>  <span class="token operator">AND</span> <span class="token number">b</span><span class="token punctuation">.</span>symbol <span class="token operator">=</span> <span class="token string">'Ibm'</span> <span class="token operator">AND</span> <span class="token number">c</span><span class="token punctuation">.</span>symbol <span class="token operator">=</span> <span class="token string">'Google'</span></code></pre></li></ul><ol start="2"><li><p><strong>并集：union 与 union all</strong></p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">with</span> <span class="token number">a1</span> <span class="token keyword">as</span> <span class="token punctuation">(</span>    <span class="token keyword">select</span>        user_account    <span class="token keyword">from</span>        <span class="token keyword">data</span>    <span class="token keyword">where</span>        hit_date <span class="token operator">between</span> <span class="token string">'2018-12-01'</span> <span class="token operator">and</span> <span class="token string">'2018-12-02'</span>        <span class="token operator">and</span>        nbtn_name <span class="token operator">like</span> <span class="token string">"%支付宝%"</span>    <span class="token keyword">union</span>     <span class="token keyword">select</span>        user_account    <span class="token keyword">from</span>        <span class="token keyword">data</span>    <span class="token keyword">where</span>        hit_date <span class="token operator">between</span> <span class="token string">'2018-12-01'</span> <span class="token operator">and</span> <span class="token string">'2018-12-02'</span>    <span class="token operator">and</span>    nbtn_name <span class="token operator">like</span> <span class="token string">"%手淘%"</span><span class="token punctuation">)</span><span class="token keyword">select</span><span class="token function">count</span><span class="token punctuation">(</span>user_account<span class="token punctuation">)</span> <span class="token keyword">as</span> pv<span class="token keyword">from</span><span class="token number">a1</span></code></pre></li></ol><ul><li>union 与 union all 的不同：<blockquote><ul><li>union, 结果包含所有行， 并删除重复行</li><li>unoin all, 结果包含所有行， 但不删除重复行</li></ul></blockquote></li></ul><ol start="3"><li><p><strong>交集：intersect</strong></p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">with</span> <span class="token number">a1</span> <span class="token keyword">as</span> <span class="token punctuation">(</span>    <span class="token keyword">select</span>        user_account    <span class="token keyword">from</span>        data1    <span class="token keyword">where</span>        hit_date <span class="token operator">between</span> <span class="token string">'2018-12-01'</span> <span class="token operator">and</span> <span class="token string">'2018-12-02'</span>        <span class="token operator">and</span>        nbtn_name <span class="token operator">like</span> <span class="token string">"%支付宝%"</span>    <span class="token keyword">intersect</span>    <span class="token keyword">select</span>        user_account    <span class="token keyword">from</span>        data1    <span class="token keyword">where</span>        hit_date <span class="token operator">between</span> <span class="token string">'2018-12-01'</span> <span class="token operator">and</span> <span class="token string">'2018-12-02'</span>    <span class="token operator">and</span>    nbtn_name <span class="token operator">like</span> <span class="token string">"%手淘%"</span><span class="token punctuation">)</span><span class="token keyword">select</span><span class="token function">count</span><span class="token punctuation">(</span>user_account<span class="token punctuation">)</span> <span class="token keyword">as</span> pv<span class="token keyword">from</span><span class="token number">a1</span></code></pre></li><li><p><strong>差集：except</strong></p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">with</span> <span class="token number">a1</span> <span class="token keyword">as</span> <span class="token punctuation">(</span>    <span class="token keyword">select</span>        user_account    <span class="token keyword">from</span>        <span class="token keyword">data</span>    <span class="token keyword">where</span>        hit_date <span class="token operator">between</span> <span class="token string">'2018-12-01'</span> <span class="token operator">and</span> <span class="token string">'2018-12-25'</span>        <span class="token operator">and</span>        nbtn_name <span class="token operator">like</span> <span class="token string">"%支付宝%"</span>    <span class="token keyword">except</span>    <span class="token keyword">select</span>        user_account    <span class="token keyword">from</span>        <span class="token keyword">data</span>    <span class="token keyword">where</span>        hit_date <span class="token operator">between</span> <span class="token string">'2018-12-01'</span> <span class="token operator">and</span> <span class="token string">'2018-12-25'</span>    <span class="token operator">and</span>    nbtn_name <span class="token operator">like</span> <span class="token string">"%手淘%"</span><span class="token punctuation">)</span><span class="token keyword">select</span><span class="token function">count</span><span class="token punctuation">(</span>user_account<span class="token punctuation">)</span> <span class="token keyword">as</span> pv<span class="token keyword">from</span><span class="token number">a1</span></code></pre></li></ol><h2 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h2><ol><li><p>select 子查询</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> shop_name<span class="token punctuation">,</span> order_date<span class="token punctuation">,</span> cost<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">sum</span><span class="token punctuation">(</span>cost<span class="token punctuation">)</span> <span class="token keyword">from</span> business<span class="token punctuation">)</span> <span class="token keyword">as</span> sum_cost<span class="token keyword">from</span>  business</code></pre></li><li><p>from 子查询</p></li></ol><ul><li><p>求连续3个月活跃的用户数</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">distinct</span> user_account<span class="token punctuation">)</span> <span class="token keyword">as</span> uv <span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">select</span> dt<span class="token punctuation">,</span>user_account<span class="token punctuation">,</span>dense_rank<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">over</span><span class="token punctuation">(</span><span class="token keyword">partition</span> <span class="token keyword">by</span> user_account <span class="token keyword">order</span> <span class="token keyword">by</span> dt<span class="token punctuation">)</span> <span class="token keyword">as</span> raws<span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">select</span> user_account<span class="token punctuation">,</span>month<span class="token punctuation">(</span>hit_date<span class="token punctuation">)</span>  <span class="token keyword">as</span> dt <span class="token keyword">from</span> table1<span class="token keyword">where</span> hit_date <span class="token operator">between</span> <span class="token string">'2020-04-01'</span> <span class="token operator">and</span> <span class="token string">'2020-06-31'</span><span class="token keyword">group</span> <span class="token keyword">by</span> user_account<span class="token punctuation">,</span> dt<span class="token punctuation">)</span> <span class="token number">a1</span><span class="token punctuation">)</span> <span class="token number">a2</span><span class="token punctuation">)</span><span class="token keyword">where</span> <span class="token number">a2</span><span class="token punctuation">.</span>raws <span class="token operator">=</span> <span class="token number">3</span></code></pre></li></ul><ol start="3"><li>where 子查询</li></ol><ul><li>把平均成绩大于600的同学每次月考成绩提取出来<pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span>  id<span class="token punctuation">,</span>  score<span class="token punctuation">,</span>  month_num<span class="token keyword">from</span>   table_score<span class="token keyword">where</span>   id <span class="token operator">in</span>   <span class="token punctuation">(</span>      <span class="token keyword">select</span>           id<span class="token punctuation">,</span> age<span class="token punctuation">(</span>score<span class="token punctuation">)</span>      <span class="token keyword">from</span>       table_score      <span class="token keyword">group</span> <span class="token keyword">by</span>           id      <span class="token keyword">having</span>          age<span class="token punctuation">(</span>score<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">600</span>  <span class="token punctuation">)</span></code></pre></li></ul><ol start="4"><li><p>with 临时表</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">with</span> <span class="token number">a1</span> <span class="token keyword">as</span> <span class="token punctuation">(</span>     <span class="token keyword">select</span>         user_account     <span class="token keyword">from</span>         <span class="token keyword">data</span>     <span class="token keyword">where</span>         hit_date <span class="token operator">between</span> <span class="token string">'2018-12-01'</span> <span class="token operator">and</span> <span class="token string">'2018-12-25'</span>         <span class="token operator">and</span>         nbtn_name <span class="token operator">like</span> <span class="token string">"%支付宝%"</span>     <span class="token keyword">except</span>     <span class="token keyword">select</span>         user_account     <span class="token keyword">from</span>         <span class="token keyword">data</span>     <span class="token keyword">where</span>         hit_date <span class="token operator">between</span> <span class="token string">'2018-12-01'</span> <span class="token operator">and</span> <span class="token string">'2018-12-25'</span>     <span class="token operator">and</span>     nbtn_name <span class="token operator">like</span> <span class="token string">"%手淘%"</span><span class="token punctuation">)</span><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span>user_account<span class="token punctuation">)</span> <span class="token keyword">as</span> pv<span class="token keyword">from</span> <span class="token number">a1</span></code></pre></li></ol><h2 id="Hive避免数据倾斜"><a href="#Hive避免数据倾斜" class="headerlink" title="Hive避免数据倾斜"></a>Hive避免数据倾斜</h2><blockquote><ul><li>数据倾斜：当我们在Hive上进行查询时，因为数据的分散度不够， 导致大量数据集中在一台或者几台服务器上， 导致数据的计算速度远远低于平均计算速度， 计算过程特别耗时。</li><li>数据倾斜的表现：任务进度长时间维持在99%，查看任务监控页面，发现只有少量子任务未完成。</li></ul></blockquote><ol><li><strong>小表Join大表</strong></li></ol><ul><li><p>Hive 会假定查询中最后一个表是最大的表， 在对每行记录进行连续操作时， 它会尝试将其他表缓存起来，然后扫描最后那个表进行计算。因此，我们在查询时，要保证连续查询中的表的大小从左到右依次是增加的。</p><blockquote><ul><li>假如，在 a, b 两个表中，b表最小， 则 写sql时需让b表在左，a表在右：</li></ul></blockquote><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span>  <span class="token number">a</span><span class="token punctuation">.</span>price_close<span class="token punctuation">,</span> <span class="token number">b</span><span class="token punctuation">.</span>price_close<span class="token keyword">FROM</span>  <span class="token number">b</span> <span class="token keyword">JOIN</span> <span class="token number">a</span> <span class="token keyword">ON</span> <span class="token number">b</span><span class="token punctuation">.</span>ymd <span class="token operator">=</span> <span class="token number">a</span><span class="token punctuation">.</span>ymd <span class="token operator">AND</span> <span class="token number">b</span><span class="token punctuation">.</span>symbol <span class="token operator">=</span> <span class="token number">a</span><span class="token punctuation">.</span>symbol<span class="token keyword">WHERE</span>  <span class="token number">a</span><span class="token punctuation">.</span>symbol <span class="token operator">=</span> <span class="token string">'APPLE'</span></code></pre><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span>  <span class="token comment" spellcheck="true">/*+3`'LKLLGFG Streamtable(a)*/</span> <span class="token number">a</span><span class="token punctuation">.</span>price_close<span class="token punctuation">,</span> <span class="token number">b</span><span class="token punctuation">.</span>price_close<span class="token comment" spellcheck="true">---Hive支持使用/*+STREAMTALBE*/语法指定哪张表是大表， 不需要排序</span><span class="token keyword">FROM</span>  <span class="token number">a</span> <span class="token keyword">JOIN</span> B <span class="token keyword">on</span> <span class="token number">a</span><span class="token punctuation">.</span>ymd <span class="token operator">=</span> <span class="token number">b</span><span class="token punctuation">.</span>ymd <span class="token operator">AND</span> <span class="token number">a</span><span class="token punctuation">.</span>symbol <span class="token operator">=</span> <span class="token number">b</span><span class="token punctuation">.</span>symbol<span class="token keyword">WHERE</span>  <span class="token number">a</span><span class="token punctuation">.</span>symbol <span class="token operator">=</span> <span class="token string">'Apple'</span></code></pre></li></ul><ol start="2"><li><strong>大表JOIN大表</strong></li></ol><ul><li>空key过滤 <blockquote><p>有时join超时是因为某些key对应的数据太多，而相同key对应的数据都会发送到相同的reducer上，从而导致内存不够。此时我们应该仔细分析这些异常的key，很多情况下，这些key对应的数据是异常数据，我们需要在sql语句中进行过滤。</p></blockquote></li></ul><ul><li>空key转换 <blockquote><ul><li>有时虽然某个key为空对应的数据很多，但是相应的数据不是异常数据，必须要包含在join的结果中，此时我们可以表a中key为空的字段赋一个随机值，是的数据随机均匀地分布到不同的reducer上。</li><li>把空值的 key 变成一个字符串加上随机数，就能把倾斜的数据分到不同的 reduce 上 ,解决数据倾斜问题。</li></ul></blockquote></li></ul><ol start="3"><li><strong>count(distinct) 去重统计</strong></li></ol><ul><li><p>数据量大时，由于count distinct 操作需要用一个 reduce task 来完成， 这一个reduce 需要处理的数据量太大，会导致整个job很难完成，一般 count distinct 使用先group by 再 count的方式替换。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">distinct</span> id<span class="token punctuation">)</span> <span class="token keyword">from</span> bigtable</code></pre><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">select</span> id <span class="token keyword">from</span> bigtable <span class="token keyword">group</span> <span class="token keyword">by</span> id<span class="token punctuation">)</span> <span class="token number">a</span></code></pre></li></ul><ol start="4"><li><p><strong>避免笛卡尔积</strong></p><p>尽量避免产生笛卡尔积，如join时不加on条件，或无效的on条件。hive只能使用1个reducer来完成笛卡尔积</p></li><li><p><strong>行列过滤</strong></p></li></ol><ul><li><p>列处理： 在查询中， 避免使用 select *, 使用条件限制取需要的列。</p></li><li><p>行处理： 在分区剪裁中，当使用join外关联时，如果将副表的过滤条件写在where后面，那么就会先全表关联，之后再过滤, 这样会耗费资源。</p><blockquote><p>优化前后</p></blockquote><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> o<span class="token punctuation">.</span>id <span class="token keyword">from</span> bigtable <span class="token number">b</span> <span class="token keyword">join</span> ori o <span class="token keyword">on</span><span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token number">b</span><span class="token punctuation">.</span>id <span class="token keyword">where</span> o<span class="token punctuation">.</span>id <span class="token operator">&lt;=</span><span class="token number">10</span><span class="token punctuation">;</span></code></pre><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token number">b</span><span class="token punctuation">.</span>id <span class="token keyword">from</span> bigtable <span class="token number">b</span><span class="token keyword">join</span> <span class="token punctuation">(</span><span class="token keyword">select</span> id <span class="token keyword">from</span> ori <span class="token keyword">where</span> id <span class="token operator">&lt;=</span><span class="token number">10</span><span class="token punctuation">)</span> o <span class="token keyword">on</span> <span class="token number">b</span><span class="token punctuation">.</span>id <span class="token operator">=</span> o<span class="token punctuation">.</span>id<span class="token punctuation">)</span></code></pre><blockquote><p>优化前后</p></blockquote><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token number">a</span><span class="token punctuation">.</span>price_close<span class="token punctuation">,</span> <span class="token number">b</span><span class="token punctuation">.</span>price_close<span class="token keyword">FROM</span> <span class="token number">b</span> <span class="token keyword">JOIN</span> <span class="token number">a</span> <span class="token keyword">ON</span> <span class="token number">b</span><span class="token punctuation">.</span>ymd <span class="token operator">=</span> <span class="token number">a</span><span class="token punctuation">.</span>ymd <span class="token operator">AND</span> <span class="token number">b</span><span class="token punctuation">.</span>symbol <span class="token operator">=</span> <span class="token number">a</span><span class="token punctuation">.</span>symbol<span class="token keyword">WHERE</span> s<span class="token punctuation">.</span>symbol <span class="token operator">=</span> <span class="token string">'APPLE'</span></code></pre><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token number">a</span><span class="token punctuation">.</span>price_close<span class="token punctuation">,</span> <span class="token number">b</span><span class="token punctuation">.</span>price_close<span class="token keyword">FROM</span> <span class="token number">b</span> <span class="token keyword">JOIN</span> <span class="token number">a</span> <span class="token keyword">ON</span> <span class="token punctuation">(</span> <span class="token number">b</span><span class="token punctuation">.</span>ymd <span class="token operator">=</span> <span class="token number">a</span><span class="token punctuation">.</span>ymd <span class="token operator">AND</span> <span class="token number">b</span><span class="token punctuation">.</span>symbol <span class="token operator">=</span> <span class="token number">a</span><span class="token punctuation">.</span>symbol <span class="token operator">and</span> s<span class="token punctuation">.</span>symbol <span class="token operator">=</span> <span class="token string">'APPLE'</span>  <span class="token comment" spellcheck="true">--正确的写法是将 where 条件写在 on 后面</span></code></pre></li></ul><ol start="6"><li><strong>union all 子查询避免中使用 group by等</strong></li></ol><ul><li><p>union all 子查询避免中使用 group by【替换 count(distinct) 除外】、count(distinct)、max、min等。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">with</span> <span class="token number">a1</span> <span class="token keyword">as</span> <span class="token punctuation">(</span>      <span class="token keyword">select</span>          user_account<span class="token punctuation">,</span>          hit_date      <span class="token keyword">from</span>          <span class="token keyword">data</span>      <span class="token keyword">where</span>          hit_date <span class="token operator">between</span> <span class="token string">'2018-12-01'</span> <span class="token operator">and</span> <span class="token string">'2018-12-13'</span>          <span class="token operator">and</span>          nbtn_name <span class="token operator">like</span> <span class="token string">"%支付宝%"</span>      <span class="token keyword">union</span> <span class="token keyword">all</span>       <span class="token keyword">select</span>          user_account<span class="token punctuation">,</span>          hit_date      <span class="token keyword">from</span>          <span class="token keyword">data</span>      <span class="token keyword">where</span>          hit_date <span class="token operator">between</span> <span class="token string">'2018-12-01'</span> <span class="token operator">and</span> <span class="token string">'2018-12-13'</span>      <span class="token operator">and</span>      nbtn_name <span class="token operator">like</span> <span class="token string">"%支付宝%"</span><span class="token punctuation">)</span><span class="token keyword">select</span>  hit_date<span class="token punctuation">,</span>  <span class="token function">count</span><span class="token punctuation">(</span>user_account<span class="token punctuation">)</span> <span class="token keyword">as</span> pv<span class="token keyword">from</span>  <span class="token number">a1</span><span class="token keyword">group</span> <span class="token keyword">by</span>  hit_date</code></pre></li></ul><ol start="7"><li><strong>避免不同数据类型进行关联</strong></li></ol><ul><li><p>使用CAST函数对数据类型进行转换，语法为cast(value AS TYPE)</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span>   <span class="token number">a</span><span class="token punctuation">.</span>price_close<span class="token punctuation">,</span>  <span class="token number">b</span><span class="token punctuation">.</span>price_close<span class="token keyword">from</span>  <span class="token number">a</span> <span class="token keyword">join</span> <span class="token number">b</span>  <span class="token keyword">on</span> <span class="token number">a</span><span class="token punctuation">.</span>user_id <span class="token operator">=</span> cast<span class="token punctuation">(</span><span class="token number">b</span><span class="token punctuation">.</span>user_id <span class="token keyword">as</span> string<span class="token punctuation">)</span><span class="token keyword">where</span>  hit_date <span class="token operator">between</span> <span class="token string">'2018-11-01'</span> <span class="token operator">and</span> <span class="token string">'2018-11-02'</span>  <span class="token operator">and</span>   <span class="token number">a</span><span class="token punctuation">.</span>symbol <span class="token operator">=</span> <span class="token string">'apple'</span></code></pre></li></ul><!-- Hive的查询注意事项以及优化总结： 1. 尽量尽早过滤数据，减少每个阶段的数据量。对于分区表要加分区，同时只选择需要使用到的字段1. 对历史库的计算经验2. 尽量原子化操作，尽量避免一个SQL包含复杂逻辑，可以使用中间表来完成复杂的逻辑3. join操作 小表要注意放在join的左边，否则会引起磁盘和内存的大量消耗4. 如果union all的部分个数大于2，或者每个union部分数据量大，应该拆成多个insert into语句，实际测试过程中，执行时间能提升50% --><h2 id="用python脚本连接数据库"><a href="#用python脚本连接数据库" class="headerlink" title="用python脚本连接数据库"></a>用python脚本连接数据库</h2><!-- 作为一名数据分析师，日报、周报、月报数据一个也不能少。 相应的， 就要在数据库中提取大量的数据， 并处理大量的Excel表格。在提取和处理数据的过程中， 对于一些重复性的劳动， 写个Python脚本来实现半自动化， 能够大幅提高自己的工作效率。 以下是自己工作中的一点总结经验。 --><!-- 对于数据库的ip地址，用户名，密码等， 如果不清楚，或数据库连接不上， 需要和开发人员对接 --><ol><li><p>首先， 用Python连接数据库</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pyhive <span class="token keyword">import</span> hive <span class="token keyword">import</span> timeconn <span class="token operator">=</span> hive<span class="token punctuation">.</span>Connection<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'ip地址'</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">10000</span><span class="token punctuation">,</span> username<span class="token operator">=</span><span class="token string">'用户名'</span><span class="token punctuation">,</span> database <span class="token operator">=</span> <span class="token string">'default'</span><span class="token punctuation">,</span> auth<span class="token operator">=</span><span class="token string">'NOSASL'</span><span class="token punctuation">)</span>cursor <span class="token operator">=</span> conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 获得连接的游标</span></code></pre></li><li><p>设置开始和结束时间 可以用python中的time函数设置时间</p><pre class=" language-python"><code class="language-python">startdate <span class="token operator">=</span> <span class="token string">'2018-09-01'</span>enddate   <span class="token operator">=</span> <span class="token string">'2018-09-19'</span></code></pre></li><li><p>用Python中的format函数将日期传入{}中</p><!-- * python中写sql脚本时， 需要用\来进行换行符的转换, \后面不能有空格。 --></li></ol><ul><li>日期用两个{}来代替， 用format函数将开始日期与结束日期传入<pre class=" language-python"><code class="language-python">sql_jifenxinxi_an <span class="token operator">=</span> <span class="token triple-quoted-string string">"""select   count(distinct user_account) as uv,   count(1) as pv from   computer_view.data where   hit_date between "{}" and "{}"   and   (btn_position like "服务-查询-积分信息%"   or   btn_home = "积分-扇形左"   ) limit 1000"""</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>startdate<span class="token punctuation">,</span>enddate<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># format 插入时间</span>cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql_jifenxinxi_an<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 运行此语句</span>cursor<span class="token punctuation">.</span>fetchall<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#fetchall():接收全部的返回结果行.</span></code></pre><!-- 我们可以按照这个格式写工作中需要运行的多个SQL语句。 这样， 当脚本运行的时候， 我们可以腾出时间来去干其他工作， 等过一段时间，所有的SQL语句都跑完了， 我们再进行统一的整理。 --></li></ul><hr><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="https://mp.weixin.qq.com/s/Xw5DOHHGh838w8YXT9lO5g" target="_blank" rel="noopener">讲讲 group 的plus版-张俊红</a></li><li>《对比excel,轻松学sql数据分析》</li><li>hive入门-视频课程</li></ol><iframe width="560" height="315" src="https://www.youtube.com/embed/9otkcuic-2o" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> SQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python-Pandas库学习</title>
      <link href="/2020/06/01/ji-neng-python-pandas-ku-xue-xi/"/>
      <url>/2020/06/01/ji-neng-python-pandas-ku-xue-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="读取与写入Excel数据"><a href="#读取与写入Excel数据" class="headerlink" title="读取与写入Excel数据"></a>读取与写入Excel数据</h1><ul><li><a href="https://blog.csdn.net/m0_37693335/article/details/81474995" target="_blank" rel="noopener">相对路径与绝对路径</a></li></ul><ol><li>读取文件夹内容<blockquote><p>r（转义符）避免路径中的\被转义。路径中不加 \ 则需要把所有的\写成/。</p></blockquote></li></ol><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">from</span> pandas <span class="token keyword">import</span> Series<span class="token punctuation">,</span> DataFrame<span class="token keyword">import</span> osfile_list <span class="token operator">=</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>r<span class="token string">'E:\工作文件\周报\周数据\测试\0902-0908'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>file_list<span class="token punctuation">,</span> <span class="token string">'\t'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 读取当前文件夹地址</span>os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><ol start="2"><li>读取xls格式Excel表</li></ol><pre class=" language-python"><code class="language-python">df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_excel<span class="token punctuation">(</span><span class="token string">'E:/工作文件/an-商品汇总-uv.xls'</span><span class="token punctuation">)</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_excel<span class="token punctuation">(</span>r<span class="token string">'E:\工作文件\an-商品汇总-uv.xls'</span><span class="token punctuation">)</span></code></pre><ol start="3"><li>读取csv格式Excel表</li></ol><pre class=" language-python"><code class="language-python">df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'E:/工作文件/周报/周数据/测试/0902-0908/商品汇总.csv'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 读取csv文件，并用 分隔符分割</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span>r<span class="token string">'E:\商品汇总.csv'</span><span class="token punctuation">,</span> sep <span class="token operator">=</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 只读取文件前两行</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span>r<span class="token string">'E:\商品汇总.csv'</span><span class="token punctuation">,</span> nrows <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span></code></pre><ul><li>读取显示编码错误</li></ul><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 修改方式</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span>path <span class="token operator">+</span> <span class="token string">'登记用户 20191127.csv'</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">"gbk"</span> <span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 当文件路径包含中文解析错误时，设置 engine 参数来消除这个错误</span><span class="token comment" spellcheck="true"># 错误原因， 当调用read_csv方法时，默认使用C语言作为解析语言，只需要将默认值c语言更改为python</span><span class="token comment" spellcheck="true"># 如果文件格式是  csv usf-8, 那么编码也改为 utf-8-sig</span><span class="token comment" spellcheck="true"># 如果文件格式是 csv格式， 则编码格式为 gbk</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'登记用户 20191127.csv'</span><span class="token punctuation">,</span> engine <span class="token operator">=</span> <span class="token string">'python'</span><span class="token punctuation">,</span> encoding <span class="token operator">=</span> <span class="token string">'utf-8-sig'</span><span class="token punctuation">)</span></code></pre><ol start="4"><li>读取txt格式数据</li></ol><pre class=" language-python"><code class="language-python">df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_table<span class="token punctuation">(</span>r<span class="token string">'C:\Users\Administrator\Desktop\haha.txt'</span><span class="token punctuation">,</span> sep <span class="token operator">=</span> <span class="token string">' '</span><span class="token punctuation">)</span><span class="token keyword">with</span> open<span class="token punctuation">(</span>r<span class="token string">'C:\Users\Administrator\Desktop\haha.txt'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    df <span class="token operator">=</span> f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span> df <span class="token operator">=</span> np<span class="token punctuation">.</span>loadtxt<span class="token punctuation">(</span>r<span class="token string">'C:\Users\Administrator\Desktop\haha.txt'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 将txt文件存为numpy数组</span></code></pre><ol start="5"><li>读取excel中的sheet名称</li></ol><pre class=" language-python"><code class="language-python">df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_Excel<span class="token punctuation">(</span>r<span class="token string">'E:\工作文件\an-商品汇总-uv.xlsx'</span><span class="token punctuation">,</span> sheet_name <span class="token operator">=</span> <span class="token string">'sheet1'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 传入sheet的顺序，从0开始计数</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_Excel<span class="token punctuation">(</span>r<span class="token string">'E:\工作文件\an-商品汇总-uv.xlsx'</span><span class="token punctuation">,</span> sheet_name <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 读取sheet,并制定文件中的第几行做行索引</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_Excel<span class="token punctuation">(</span>r<span class="token string">'E:\工作文件\an-商品汇总-uv.xlsx'</span><span class="token punctuation">,</span> sheet_name <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> index_col <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 读取sheet文件， 并制定文件中的第几列做列索引</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_Excel<span class="token punctuation">(</span>r<span class="token string">'E:\工作文件\商品汇总.xlsx'</span><span class="token punctuation">,</span> sheet_name <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> head <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 当本地文件过多时，可以通过设定 usecols 参数来指定要导入的列</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_Excel<span class="token punctuation">(</span>r<span class="token string">'E:\商品汇总.xlsx'</span><span class="token punctuation">,</span> usecols <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># uescols = [0,2]</span><span class="token comment" spellcheck="true"># 读取excel中所有sheet，并进行合并</span>rbook <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>kong_data <span class="token operator">=</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>r<span class="token string">'F:\省资源位'</span><span class="token punctuation">)</span><span class="token keyword">for</span> file_name <span class="token keyword">in</span> kong_data<span class="token punctuation">:</span>    data_excel <span class="token operator">=</span> pd<span class="token punctuation">.</span>ExcelFile<span class="token punctuation">(</span>r<span class="token string">'F:\省资源位\\'</span><span class="token operator">+</span>file_name<span class="token punctuation">)</span>    sheet <span class="token operator">=</span> data_excel<span class="token punctuation">.</span>sheet_names    <span class="token keyword">for</span> i <span class="token keyword">in</span> sheet<span class="token punctuation">:</span>        data_button_rest <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_excel<span class="token punctuation">(</span>r<span class="token string">'F:\省资源位\\'</span><span class="token operator">+</span>file_name<span class="token punctuation">,</span> sheet_name<span class="token operator">=</span> i <span class="token punctuation">)</span>        rbook<span class="token punctuation">.</span>append<span class="token punctuation">(</span>data_button_rest<span class="token punctuation">)</span>        result_df <span class="token operator">=</span>pd<span class="token punctuation">.</span>concat<span class="token punctuation">(</span>rbook<span class="token punctuation">)</span>datas_excel <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>result_df<span class="token punctuation">)</span></code></pre><ul><li>将运行的所有数据都展现出来， 而不是只展现最后一条</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span>  IPython<span class="token punctuation">.</span>core<span class="token punctuation">.</span>interactiveshell <span class="token keyword">import</span> InteractiveShellInteractiveShell<span class="token punctuation">.</span>ast_node_interactivity <span class="token operator">=</span> <span class="token string">"all"</span></code></pre><ol start="6"><li>将数据写入Excel表， 并输出</li></ol><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 写入数据</span>df<span class="token punctuation">.</span>to_excel<span class="token punctuation">(</span><span class="token string">'C:/Users/Administrator/Desktop/'</span><span class="token operator">+</span><span class="token string">'商品分类.xlsx'</span><span class="token punctuation">)</span>df<span class="token punctuation">.</span>to_excel<span class="token punctuation">(</span>r<span class="token string">'C:\Users\Administrator\Desktop\\'</span><span class="token operator">+</span><span class="token string">'商品分类.xlsx'</span><span class="token punctuation">)</span>df<span class="token punctuation">.</span>to_excel<span class="token punctuation">(</span>r<span class="token string">'C:\Users\Administrator\Desktop/'</span><span class="token operator">+</span><span class="token string">'商品分类.xlsx'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 写入数据，且不带索引</span>df<span class="token punctuation">.</span>to_excel<span class="token punctuation">(</span><span class="token string">'C:/Users/商品分类.xlsx'</span><span class="token punctuation">,</span> sheet_name <span class="token operator">=</span> <span class="token string">'首页'</span><span class="token punctuation">,</span> index <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 设置要导出的列</span>df<span class="token punctuation">.</span>to_excel<span class="token punctuation">(</span><span class="token string">'C:/Users/商品分类.xlsx'</span><span class="token punctuation">,</span> sheet_name <span class="token operator">=</span> <span class="token string">'首页'</span><span class="token punctuation">,</span> index <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">,</span>           columns <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'ID'</span><span class="token punctuation">,</span> '销量’<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 设置编码格式</span>df<span class="token punctuation">.</span>to_excel<span class="token punctuation">(</span><span class="token string">'C:/Users/商品分类.xlsx'</span><span class="token punctuation">,</span> sheet_name <span class="token operator">=</span> <span class="token string">'首页'</span><span class="token punctuation">,</span> index <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">,</span>           encoding <span class="token operator">=</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 缺失值、无穷值处理</span>df<span class="token punctuation">.</span>to_excel<span class="token punctuation">(</span><span class="token string">'C:/Users/商品分类.xlsx'</span><span class="token punctuation">,</span> sheet_name <span class="token operator">=</span> <span class="token string">'首页'</span><span class="token punctuation">,</span> index <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">,</span>           na_rep <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true"># 缺失值用0填充</span>           inf_rep <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment" spellcheck="true"># 无穷之用0填充</span>           <span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 导出csv文件，设置分隔符</span>df<span class="token punctuation">.</span>to_excel<span class="token punctuation">(</span><span class="token string">'C:/Users/商品分类.xlsx'</span><span class="token punctuation">,</span> sheet_name <span class="token operator">=</span> <span class="token string">'首页'</span><span class="token punctuation">,</span> index <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">,</span>            sep <span class="token operator">=</span> <span class="token string">','</span>           <span class="token punctuation">)</span></code></pre><ul><li>将求出的数据存储在excel中的多个sheet中</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">from</span> openpyxl <span class="token keyword">import</span> load_workbookwriter <span class="token operator">=</span> pd<span class="token punctuation">.</span>ExcelWriter<span class="token punctuation">(</span><span class="token string">'F:/notebooks/zhoushuju.xlsx'</span><span class="token punctuation">)</span>btn_navigation<span class="token punctuation">.</span>to_excel<span class="token punctuation">(</span>writer<span class="token punctuation">,</span> sheet_name <span class="token operator">=</span> <span class="token string">'底部导航'</span><span class="token punctuation">)</span>shouye_top20<span class="token punctuation">.</span>to_excel<span class="token punctuation">(</span>writer<span class="token punctuation">,</span> sheet_name <span class="token operator">=</span> <span class="token string">'首页top20'</span><span class="token punctuation">)</span>writer<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>writer<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><ol start="7"><li>其他数据格式</li></ol><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 从SQL表/库导入数据 </span><span class="token keyword">import</span> pymysqleng <span class="token operator">=</span> pymysql<span class="token punctuation">.</span>connet<span class="token punctuation">(</span>host<span class="token operator">=</span> <span class="token string">'100.129'</span><span class="token punctuation">,</span> user <span class="token operator">=</span> <span class="token string">'root'</span><span class="token punctuation">,</span> password <span class="token operator">=</span> <span class="token string">'1234'</span><span class="token punctuation">,</span> df <span class="token operator">=</span> <span class="token string">'db'</span><span class="token punctuation">,</span> charset <span class="token operator">=</span> <span class="token string">'ugf8'</span><span class="token punctuation">)</span>query <span class="token operator">=</span> <span class="token triple-quoted-string string">"""select * from android_log """</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_sql<span class="token punctuation">(</span>query<span class="token punctuation">,</span> eng<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 导出数据到SQL表 </span>df<span class="token punctuation">.</span>to_sql<span class="token punctuation">(</span>table_name<span class="token punctuation">,</span> eng<span class="token punctuation">)</span></code></pre><ol start="8"><li>常见问题</li></ol><ul><li>当文件有中文时， 可能会出现错误：Initializing from file failed 有中文， 可以用此方法解决</li></ul><pre class=" language-python"><code class="language-python">f <span class="token operator">=</span> open<span class="token punctuation">(</span>‘我的文件<span class="token punctuation">.</span>csv’<span class="token punctuation">)</span>res <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span>f<span class="token punctuation">)</span></code></pre><ul><li>查看大文件有多少列</li></ul><pre class=" language-python"><code class="language-python">data <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">'E:/用户明细.csv'</span><span class="token punctuation">)</span>data1 <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span>data<span class="token punctuation">,</span> iterator<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>data2 <span class="token operator">=</span> data1<span class="token punctuation">.</span>get_chunk<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>data2<span class="token punctuation">)</span></code></pre><p><a href="http://wiki.jikexueyuan.com/project/explore-python/Advanced-Features/iterator.html" target="_blank" rel="noopener">迭代器</a></p><!-- # 对输出数据进行处理[pandas的数据输出显示设置](https://www.jianshu.com/p/5c0aa1fa19af)1. 对表中某一列元素进行相同操作```df['金额'].apply(lambda x:x+1)df['金额'] +2```2. 对表中每一个元素进行相同操作```df.applymap(lambda x:x+1)`````` pythonimport numpy as npimport pandas as pddf = pd.DataFrame(np.random.randn(150, 150))# pd.set_option('expand_frame_repr', False) #数据超过总宽度后，是否折叠显示pd.set_option('display.width', 100) #数据显示总宽度pd.set_option('max_rows', 100) #显示最多行数，超出该数以省略号表示pd.set_option('max_columns', 100) #显示最多列数，超出该数以省略号表示pd.set_option('max_colwidth', 16) #设置单列的宽度，用字符个数表示，单个数据长度超出该数时以省略号表示pd.set_option('large_repr', 'truncate') #数据超过设置显示最大行列数时，带省略号显示/若是info则是统计信息显示pd.set_option('show_dimensions', True) #当数据带省略号显示时，是否在最后显示数据的维度print(df)pd.set_option('max_info_columns', 100) #当列数超过这个值时，调用df.info()函数时不会统计每列的非空值。print(df.info())```* 将数据变成小数形式``` pythonimport pandas as pdinputfile = '../data/electricity_data.xls'outputfile = './electricity_data_analyze1.xls'data = pd.read_excel(inputfile)data[u'线损率'] = (data[u'供入电量']-data[u'供出电量'])/data[u'供入电量']    #data[u'线损率']的类型为series； data[u'线损率']为小数data[u'线损率'] = data[u'线损率'].apply(lambda x: format(x, '.2%'))    #Series.apply()让序列的值依次在lambda函数中执行； data['线损率']由小数转化为百分数data.to_excel(outputfile, index=False)``` --><h1 id="描述数据"><a href="#描述数据" class="headerlink" title="描述数据"></a>描述数据</h1><ol><li>表信息</li></ol><pre class=" language-python"><code class="language-python">df<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><ol start="2"><li>显示数据的行列数</li></ol><pre class=" language-python"><code class="language-python">df<span class="token punctuation">.</span>shape</code></pre><ol start="3"><li>查看数据格式dtpyes</li></ol><pre class=" language-python"><code class="language-python">df<span class="token punctuation">.</span>dtypes</code></pre><ol start="4"><li>显示列名、元素</li></ol><pre class=" language-python"><code class="language-python">df<span class="token punctuation">.</span>columnsdf<span class="token punctuation">.</span>values</code></pre><ol start="5"><li>添加默认列名</li></ol><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 如果数据没有标题行，可用pandas添加默认的列名</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_excel<span class="token punctuation">(</span><span class="token string">'x.xlsx'</span><span class="token punctuation">,</span> header <span class="token operator">=</span> None<span class="token punctuation">)</span> </code></pre><ol start="6"><li>显示前数据前5行</li></ol><pre class=" language-python"><code class="language-python">df<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>df<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'标题'</span><span class="token punctuation">,</span> <span class="token string">'客户端uv'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><ol start="7"><li>显示数据后5行</li></ol><pre class=" language-python"><code class="language-python">df<span class="token punctuation">.</span>tail<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span></code></pre><ol start="8"><li>值</li></ol><pre class=" language-python"><code class="language-python">df<span class="token punctuation">.</span>values</code></pre><ol start="9"><li>读取a列</li></ol><pre class=" language-python"><code class="language-python">df<span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span></code></pre><ol start="10"><li>找到重复值</li></ol><pre class=" language-python"><code class="language-python">df<span class="token punctuation">.</span>duplicated<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><ol start="11"><li>显示数据唯一值（unique函数）</li></ol><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 数据有0， 是因对缺失值进行了填充</span>df<span class="token punctuation">[</span><span class="token string">'经纪人级别'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>unique<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><ol start="12"><li>对第几行数据不读取</li></ol><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#不读取哪里数据，可用skiprows=[i]，跳过文件的第i行不读取</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_excel<span class="token punctuation">(</span><span class="token string">'x.xlsx'</span><span class="token punctuation">,</span>skiprows<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token punctuation">)</span> </code></pre><ol start="13"><li>对缺失值进行识别</li></ol><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 所有缺失值显示为True</span>pd<span class="token punctuation">.</span>insull<span class="token punctuation">(</span>df<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># df.isnull()</span></code></pre><ol start="14"><li>计算</li></ol><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#计算此data的数量</span>df<span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value_counts<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 升序计数</span>df<span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value_counts<span class="token punctuation">(</span>ascending <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 升序计数并分组</span>df<span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value_counts<span class="token punctuation">(</span>ascending <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">,</span> bins <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 计数</span>df<span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><ol start="15"><li>字符和数值之间的转化<pre class=" language-python"><code class="language-python">int<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 转化成整数</span>float<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 转化成整数</span>str<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 转化成整数</span>type<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 转化成整数</span></code></pre></li></ol><pre><code>16.  获取数据分布情况```pythondata.describe()</code></pre><h1 id="数据清洗"><a href="#数据清洗" class="headerlink" title="数据清洗"></a>数据清洗</h1><ol><li><p>删除空值 （dropna函数）</p><p>  <a href="https://blog.csdn.net/yuanxiang01/article/details/78738812" target="_blank" rel="noopener">DataFrame中的空值处理</a></p></li></ol><pre class=" language-python"><code class="language-python">df<span class="token punctuation">.</span>dropna<span class="token punctuation">(</span>how<span class="token operator">=</span><span class="token string">'any'</span><span class="token punctuation">)</span>df<span class="token punctuation">.</span>dropna<span class="token punctuation">(</span>how <span class="token operator">=</span> <span class="token string">'all'</span><span class="token punctuation">)</span></code></pre><pre><code>用法：DataFrame.drop(labels=None,axis=0, index=None, columns=None, inplace=False)参数说明：labels 就是要删除的行列的名字，用列表给定axis 默认为0，指删除行，因此删除columns时要指定axis=1；index 直接指定要删除的行columns 直接指定要删除的列inplace=False，默认该删除操作不改变原数据，而是返回一个执行删除操作后的新dataframe；inplace=True，则会直接在原数据上进行删除操作，删除后无法返回。</code></pre><pre><code># 删除包含 集团 二字 的行read_data = df[- df['所属省份名称'].isin(['集团'])] </code></pre><ol start="2"><li>数值删除</li></ol><ul><li>删除列</li></ul><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 删除列, axis=1表示删除列</span>df<span class="token punctuation">.</span>drop<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"销售额"</span><span class="token punctuation">,</span> <span class="token string">"ID"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> axis <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span>df<span class="token punctuation">.</span>drop<span class="token punctuation">(</span>columns <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"销售额"</span><span class="token punctuation">,</span> <span class="token string">"ID"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 传入列位置</span>df<span class="token punctuation">.</span>drop<span class="token punctuation">(</span>df<span class="token punctuation">.</span>columns<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> axis <span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span></code></pre><ul><li>删除行</li></ul><pre><code># 删除行，筛选行名df.drop(['一','二'], axis = 0)df.drop(index = ['一', '二'])# 删除行，筛选行索引df.drop(df.index[[0,1]], axis = 0)# 只要年龄小于40的用户df[df['ID'] &lt; 40]</code></pre><ol start="3"><li>填充（fillna函数）</li></ol><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 空值用0填充</span>df<span class="token punctuation">.</span>fillna<span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>df<span class="token punctuation">.</span>replace<span class="token punctuation">(</span>np<span class="token punctuation">.</span>NaN<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 用均值对空值进行填充</span>df<span class="token punctuation">[</span><span class="token string">'时长'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">'时长'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 按照不同列进行填充</span>df<span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'性别'</span> <span class="token punctuation">:</span> <span class="token string">'男'</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><ol start="4"><li>更改数据格式，更改数据类型</li></ol><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 将数据格式int64,改为float格式</span>df<span class="token punctuation">[</span><span class="token string">'大区'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token string">'float64'</span><span class="token punctuation">)</span></code></pre><ol start="5"><li>更改列名称, 修改列名。 </li></ol><pre class=" language-python"><code class="language-python">df<span class="token punctuation">.</span>columns <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'导航'</span><span class="token punctuation">,</span><span class="token string">'uv'</span><span class="token punctuation">,</span> <span class="token string">'pv'</span><span class="token punctuation">,</span><span class="token string">'户均点击'</span><span class="token punctuation">]</span><span class="token punctuation">]</span>df<span class="token punctuation">.</span>rename<span class="token punctuation">(</span>columns<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'IM渠道'</span><span class="token punctuation">:</span> <span class="token string">'渠道'</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><ol start="6"><li>添加修改索引</li></ol><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 添加索引</span>df<span class="token punctuation">.</span>index <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 修改索引,重新设置</span>df <span class="token operator">=</span> df<span class="token punctuation">.</span>set_index<span class="token punctuation">[</span><span class="token string">'标题'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 重命名索引</span>df<span class="token punctuation">.</span>rename <span class="token punctuation">(</span>index <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">:</span> <span class="token string">'一'</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><ul><li>重置索引</li></ul><p><img src="https://i.loli.net/2019/12/21/C7cxnGMVfFDeLEX.jpg" alt="微信图片_20191221153932.jpg"></p><pre class=" language-python"><code class="language-python">DataFrame<span class="token punctuation">.</span>reset_index<span class="token punctuation">(</span>level<span class="token operator">=</span>None<span class="token punctuation">,</span> drop<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> inplace<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 默认将所有index转化成columns</span>df<span class="token punctuation">.</span>reset_index<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#将第0级索引转化为 columns</span>df<span class="token punctuation">.</span>reset_index<span class="token punctuation">(</span>level<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 将原索引删除，不加入columns</span>df<span class="token punctuation">.</span>reset_index<span class="token punctuation">(</span>drop <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span></code></pre><ol start="7"><li><p>删除重复值</p><p><a href="https://www.cnblogs.com/cocowool/p/8421997.html" target="_blank" rel="noopener">Pandas删除数据的几种情况</a></p></li></ol><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 默认第一次出现的保留，其余删除</span>df<span class="token punctuation">[</span><span class="token string">'门店'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>drop_duplicates<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 最后一次出现的保留，其余删除</span>df<span class="token punctuation">[</span><span class="token string">'门店'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>drop_duplicates<span class="token punctuation">(</span>keep <span class="token operator">=</span> <span class="token string">'last'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 多列去重</span>df<span class="token punctuation">.</span>drop_duplicates<span class="token punctuation">(</span>subset <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'姓名'</span><span class="token punctuation">,</span> <span class="token string">'唯一识别码'</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><ol start="8"><li>对列表内的值进行替换</li></ol><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 一对一替换</span>df<span class="token punctuation">[</span><span class="token string">'ID'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'1053'</span><span class="token punctuation">,</span> <span class="token string">'110'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 多对一替换</span>df<span class="token punctuation">[</span><span class="token string">'ID'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'1053'</span><span class="token punctuation">:</span> <span class="token string">'110'</span><span class="token punctuation">,</span> <span class="token string">'230'</span><span class="token punctuation">:</span> <span class="token string">'33'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>df<span class="token punctuation">.</span>columns<span class="token punctuation">.</span>str<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">,</span> <span class="token string">'_'</span><span class="token punctuation">)</span></code></pre><h1 id="对数据进行处理"><a href="#对数据进行处理" class="headerlink" title="对数据进行处理"></a>对数据进行处理</h1><ol><li>对两个数据进行合并- merge, join, concat函数</li></ol><ul><li>merge</li></ul><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 按照轴把多个对象拼接起来</span>pd<span class="token punctuation">.</span>concat<span class="token punctuation">(</span>df1<span class="token punctuation">,</span> df2<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># join函数适合根据索引进行合并，合并索引相同但列不同的对象</span><span class="token comment" spellcheck="true"># merge函数，根据一个或多个键连接多行, 相当于excel中的vlookup</span><span class="token comment" spellcheck="true"># 将left和right进行合并</span>pd<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 指定以key为键进行合并</span>pd<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">,</span> on <span class="token operator">=</span> <span class="token string">'key'</span><span class="token punctuation">)</span> pd<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>name_3<span class="token punctuation">,</span> name_1<span class="token punctuation">,</span> left_on <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'ming'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> right_on <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'标记'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># key2列不相同的部分会直接舍弃掉</span>pd<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">,</span> on <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'key'</span><span class="token punctuation">,</span> <span class="token string">'key2'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 保留key2列不相同的部分</span>pd<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">,</span> on <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'key'</span><span class="token punctuation">,</span> <span class="token string">'key2'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> how <span class="token operator">=</span> <span class="token string">'outer'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 不相同的部分指定以左表为基准</span>pd<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">,</span> on <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'key'</span><span class="token punctuation">,</span> <span class="token string">'key2'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> how <span class="token operator">=</span> <span class="token string">'left'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 重复列名处理</span><span class="token comment" spellcheck="true"># pd.merge()会自动给这些重复名添加后缀_x、_y，也可以自己命名。</span>pd<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>df1<span class="token punctuation">,</span>df2<span class="token punctuation">,</span> on <span class="token operator">=</span> <span class="token string">'id'</span><span class="token punctuation">,</span> suffixes<span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'_L'</span><span class="token punctuation">,</span> <span class="token string">'_R'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#按照索引进行合并</span>pd<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>df1<span class="token punctuation">,</span>df2<span class="token punctuation">,</span>left_index<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>right_index<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span></code></pre><ul><li>concat函数, 按照标题进行拼接</li></ul><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 普通合并</span>pd<span class="token punctuation">.</span>concat<span class="token punctuation">(</span><span class="token punctuation">[</span>df1<span class="token punctuation">,</span> df2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 索引设置</span>pd<span class="token punctuation">.</span>concat<span class="token punctuation">(</span><span class="token punctuation">[</span>df1<span class="token punctuation">,</span> df2<span class="token punctuation">]</span><span class="token punctuation">,</span> ignore_index<span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 合并后删除重复值</span>pd<span class="token punctuation">.</span>concat<span class="token punctuation">(</span><span class="token punctuation">[</span>df1<span class="token punctuation">,</span> df2<span class="token punctuation">]</span><span class="token punctuation">,</span> ignore_index <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">.</span>drop_duplicates<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><ol start="2"><li>对数据进行排序</li></ol><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 按照ID进行升序排列</span><span class="token comment" spellcheck="true"># 按照ID进行降序排列</span>df<span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span>by <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'ID'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ascending <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 在保证销售额列降序的情况下，对ID列进行升序处理</span>data<span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span>by <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'销售额'</span><span class="token punctuation">,</span> <span class="token string">'ID'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>ascending <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">]</span><span class="token punctuation">,</span> inplace <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 默认将ID是缺失值的列显示在最后面</span>df<span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span>by <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'ID'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 将ID是缺失值的列显示在最前面</span>df<span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span>by <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'ID'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> na_position <span class="token operator">=</span> <span class="token string">'first'</span><span class="token punctuation">)</span></code></pre><ol start="3"><li>对数值进行排名</li></ol><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 对应Excel中的 rank.avg函数</span>df<span class="token punctuation">[</span><span class="token string">'ID'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>rank<span class="token punctuation">(</span>method<span class="token operator">=</span> <span class="token string">'average'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 按值在所有的排列数据中出现的先后顺序排名</span>df<span class="token punctuation">[</span><span class="token string">'ID'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>rank<span class="token punctuation">(</span>method <span class="token operator">=</span> <span class="token string">'first'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#  与Excel中rank.eq 函数的功能一样</span>df<span class="token punctuation">[</span><span class="token string">'ID'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>rank<span class="token punctuation">(</span>method <span class="token operator">=</span> <span class="token string">'min'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 与min相反，取重复值对应的最大排名</span>df<span class="token punctuation">[</span><span class="token string">'ID'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>rank<span class="token punctuation">(</span>method <span class="token operator">=</span> <span class="token string">'max'</span><span class="token punctuation">)</span></code></pre><ol start="3"><li>对数据进行分组</li></ol><pre><code># 如果price列的值&gt;3000，group列显示high，否则显示lowdf['group'] = np.where(df['客户当天发送消息数'] &gt; 5,'high','low')# 对符合多个条件进行分组# 符合经纪人级别为A1且经纪人响应时长&gt;24的在sign列显示为1df.loc[(df['经纪人级别'] == 'A1') &amp; (df['经纪人响应时长']&gt;= 24.0), 'sign']=1</code></pre><ol start="4"><li>对数据进行分列</li></ol><pre class=" language-python"><code class="language-python">pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'网'</span><span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> df<span class="token punctuation">[</span><span class="token string">'客户注册渠道'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                index<span class="token operator">=</span>df<span class="token punctuation">.</span>index<span class="token punctuation">,</span>columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'客户注册渠道'</span><span class="token punctuation">,</span><span class="token string">'size'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>!<span class="token operator">-</span><span class="token operator">-</span> df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> 首页jhrj_1<span class="token punctuation">[</span><span class="token string">'所属省份编码'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                index<span class="token operator">=</span>df<span class="token punctuation">.</span>index<span class="token punctuation">,</span>columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'客户注册渠道'</span><span class="token punctuation">,</span><span class="token string">'size'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span><span class="token comment" spellcheck="true"># 分列完对数据进行合并</span>df1 <span class="token operator">=</span> pd<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>首页jhrj_1<span class="token punctuation">,</span> df<span class="token punctuation">,</span> left_index <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">,</span> right_index <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span></code></pre><ol start="5"><li>新增一列</li></ol><pre><code>data = data.assign(ration = [4, 2, 5, 6, 7, 8, 2, 9, 4])data['rations'] = [5, 2, 5, 6, 7, 8, 2, 9, 4]</code></pre><ol start="6"><li>对数据进行切分</li></ol><pre><code># 指明切分区间pd.cut(df['年龄'], bins = [0,3,6,10])# 将数据切成3份pd.qcut(df['年龄'],3 )</code></pre><ol start="7"><li>取出的数据， 指定取到小数点几位数？</li></ol><pre><code># 取到小数点后3位for i in a :    print("%.3f"%c)# 设置小数点位数，四舍五入df['cnts'].round( decimals = 2)</code></pre><ol start="8"><li>将 list 格式转化成 DataFrame 格式</li></ol><pre><code>df = pd.DataFrame(data, columns = ['省份', '按钮名称', 'uv', 'pv'] )</code></pre><h1 id="数据选择"><a href="#数据选择" class="headerlink" title="数据选择"></a>数据选择</h1><ol><li>选择某一列/ 某几列</li></ol><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 普通索引- 根据名称进行选择</span>df<span class="token punctuation">[</span><span class="token string">'客户端uv'</span><span class="token punctuation">]</span>df<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'标题'</span><span class="token punctuation">,</span> <span class="token string">'客户端uv'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 位置索引 / 切片索引， 根据所在第几列进行选择</span><span class="token comment" spellcheck="true"># : 表示选择所有的行， 逗号后面表示要选择列的位置区域</span>df<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># 获取第1列和第3列的数值</span></code></pre><ol start="2"><li>选择某一行/某几行</li></ol><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 普通索引-loc</span>df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token string">'第一行'</span><span class="token punctuation">]</span>df<span class="token punctuation">.</span>log<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'第一行'</span><span class="token punctuation">,</span> <span class="token string">'第二行'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 位置索引，切片索引</span> <span class="token comment" spellcheck="true"># 选择第一行</span>df<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 选择第一行和第二行</span>df<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> </code></pre><ol start="3"><li>根据指定条件进行筛选</li></ol><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 选择年龄小于200的数据</span>df<span class="token punctuation">[</span>df<span class="token punctuation">[</span><span class="token string">'年龄'</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">200</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">#年龄小于200，且id小于300</span>df<span class="token punctuation">[</span><span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">'年龄'</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>   <span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">]</span>df<span class="token punctuation">[</span>np<span class="token punctuation">.</span>logical_and<span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">'年龄'</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">10</span><span class="token punctuation">,</span> df<span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># A列值大于10，或 B列值大于5</span>df<span class="token punctuation">[</span><span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">'C'</span><span class="token punctuation">]</span> <span class="token operator">></span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">]</span>df<span class="token punctuation">[</span>np<span class="token punctuation">.</span>logical_or<span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">10</span><span class="token punctuation">,</span> df<span class="token punctuation">[</span><span class="token string">'C'</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 当 A列的值大于13时， 显示B，c列的值</span>df<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'B'</span><span class="token punctuation">,</span><span class="token string">'C'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>df<span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token number">13</span><span class="token punctuation">]</span></code></pre><ol start="4"><li>行列同时选择</li></ol><ul><li>普通索引+普通索引选择指定的行和列</li></ul><pre class=" language-python"><code class="language-python">df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'第一行'</span><span class="token punctuation">,</span> <span class="token string">'第三行'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'订单号’, '</span>ID'<span class="token punctuation">]</span><span class="token punctuation">]</span></code></pre><ul><li>位置索引 + 位置索引选择指定的行和列</li></ul><pre class=" language-python"><code class="language-python">df<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span>df<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span></code></pre><ul><li>布尔索引+ 普通索引</li></ul><pre class=" language-python"><code class="language-python">df<span class="token punctuation">[</span>df<span class="token punctuation">[</span><span class="token string">'年龄'</span><span class="token punctuation">]</span><span class="token operator">&lt;</span> <span class="token number">200</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'订单编号'</span><span class="token punctuation">,</span> <span class="token string">'ID'</span><span class="token punctuation">]</span><span class="token punctuation">]</span></code></pre><ul><li>切片索引+ 普通索引</li></ul><pre class=" language-python"><code class="language-python">df<span class="token punctuation">.</span>ix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'订单变化'</span><span class="token punctuation">,</span> <span class="token string">'ID'</span><span class="token punctuation">]</span><span class="token punctuation">]</span></code></pre><ol start="5"><li>按条件进行提取</li></ol><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 用isin函数进行判断</span><span class="token comment" spellcheck="true"># 使用isin函数根据特定值筛选记录。筛选A值等于10或者13的记录</span>df<span class="token punctuation">[</span>df<span class="token punctuation">.</span>A<span class="token punctuation">.</span>isin<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 查看这一列是否包含某个值</span>df<span class="token punctuation">[</span><span class="token string">'级别'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>isin<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'A3'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 先判断是否包含，然后将符合条件的数据提取出来。</span>df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>df<span class="token punctuation">[</span><span class="token string">'级别'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>isin<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'A3'</span><span class="token punctuation">,</span><span class="token string">'M4'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span></code></pre><hr><h1 id="数据汇总"><a href="#数据汇总" class="headerlink" title="数据汇总"></a>数据汇总</h1><ol><li>对数据进行分类 - group by函数</li></ol><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 按照某列分组求和</span>df<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token string">'渠道'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 按照多列分组求和</span>df<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'渠道'</span><span class="token punctuation">,</span> <span class="token string">'ID'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 对分组后的结果进行重新索引</span>df<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token string">'渠道'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reset_index<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><ol start="2"><li>aggregate方法</li></ol><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 对同一列 先做计数汇总运算，再做汇总运算</span>df<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token string">'渠道'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>aggregate<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'count'</span><span class="token punctuation">,</span> <span class="token string">'sum'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 针对不同的列做不同的汇总运算</span>df<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token string">'渠道'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>aggregate<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'ID'</span> <span class="token punctuation">:</span> <span class="token string">'count'</span><span class="token punctuation">,</span>                              <span class="token string">'销量'</span> <span class="token punctuation">:</span> <span class="token string">'sum'</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><ol start="3"><li>pivot_table-数据透视表</li></ol><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 为方便处理， 一般需要对结果进行重置索引</span>pd<span class="token punctuation">.</span>pivot_table<span class="token punctuation">(</span>df<span class="token punctuation">,</span> values <span class="token operator">=</span> <span class="token string">'ID'</span><span class="token punctuation">,</span> columns <span class="token operator">=</span> <span class="token string">'渠道'</span><span class="token punctuation">,</span>                index <span class="token operator">=</span> <span class="token string">'客户分类'</span><span class="token punctuation">,</span> aggfun <span class="token operator">=</span> <span class="token string">'count'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reset_index<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p> pd.pivot_table(data, values, index, columns, aggfunc, fill_value, margins, dropna, margins_name = ‘All’)</p><blockquote><p>data: 数据<br>values: 对应的值<br>index: 对应的行<br>columns: 对应的列<br>aggfunc : 对values的计算类型<br>fill_value : 对空值的填充值<br>margins: 是否显示合计列<br>dropna: 是否删除缺失值，如果为真，则一整行全删除<br>margins_name: 合计列的列名</p></blockquote><ol start="4"><li>对数据进行映射</li></ol><pre><code># 用map函数对字典进行映射， 新加一列data['upper'] = data['group'].map(dataUpper)</code></pre><ol start="5"><li>数据采样</li></ol><pre><code># 简单随机抽取sampledf.sample(n=3)# 设置采样权重# 需要对每一行进行权重设置，列表行数少可行，过多不可行# 假设有4行数据，设置采样权重weights = [0, 0, 0.5, 0.5]df.sample(n=4, weights=weights)## 确定采样后是否放回# 采样后放回，Truedf.sample(n=6, replace=True)</code></pre><ol start="6"><li>统计计算</li></ol><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 计算每一列的个数</span>df<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 计算每一行的个数</span>df<span class="token punctuation">.</span>count<span class="token punctuation">(</span>axis <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 求和</span>df<span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token punctuation">)</span>df<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>axis <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 中位数</span>df<span class="token punctuation">.</span>median<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 求和</span>df<span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 求最大值</span>df<span class="token punctuation">.</span>max<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 求最小值</span>df<span class="token punctuation">.</span>min<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 求众数</span>df<span class="token punctuation">.</span>mode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 求方差</span>df<span class="token punctuation">.</span>var<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 求标准差</span>df<span class="token punctuation">.</span>std<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 求分位数</span>df<span class="token punctuation">.</span>quantile<span class="token punctuation">(</span><span class="token number">0.75</span><span class="token punctuation">,</span> axis <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 描述统计 describe函数</span><span class="token comment" spellcheck="true">#自动生成数据的数量，均值，标准差等数据</span><span class="token comment" spellcheck="true">#round（2）,显示小数点后面2位数，T转置</span>df<span class="token punctuation">.</span>describe<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>round<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>T<span class="token comment" spellcheck="true"># 标准差std()</span>df<span class="token punctuation">[</span><span class="token string">'经纪人响应时长'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>std<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 协方差cov</span>df<span class="token punctuation">[</span><span class="token string">'经纪人当天发送消息数'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cov<span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">'客户当天发送消息数'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 相关性分析corr</span>df<span class="token punctuation">[</span><span class="token string">'客户当天发送消息数'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>corr<span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">'经纪人当天发送消息数'</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><ol start="7"><li>数值计数</li></ol><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 查看不同值出现的次数， #默认进行排列</span>df<span class="token punctuation">[</span><span class="token string">'ID'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value_counts<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 查看不同值出现的占比, #默认进行排列</span>df<span class="token punctuation">[</span><span class="token string">'ID'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value_counts<span class="token punctuation">(</span>normalize <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 查看不同值出现的占比， 不进行排列</span>df<span class="token punctuation">[</span><span class="token string">'ID'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value_counts<span class="token punctuation">(</span>normalize <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">,</span> sort <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">)</span></code></pre><ol start="8"><li>插入数据</li></ol><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 在 insert方法中，指明要插入的位置、插入新列的列名，以及要插入的数据</span>df<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'销售品id'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'01'</span><span class="token punctuation">,</span> <span class="token string">'02'</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><ol start="9"><li>对数据进行转置</li></ol><pre><code>df.T</code></pre><ol start="10"><li>索引重塑</li></ol><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 将表格型数据转化成树形数据</span>df<span class="token punctuation">.</span>stack<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 将树形数据转化成表格型数据</span>df<span class="token punctuation">.</span>stack<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>unstack<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="https://i.loli.net/2019/12/22/8dJwIqrSRTLYvnK.jpg" alt="索引重塑"></p><ol start="11"><li>长宽表转换</li></ol><ul><li>宽表<br><img src="https://i.loli.net/2019/12/22/plz94hj3vIuHA2B.jpg" alt="宽表"></li><li>长表<br><img src="https://i.loli.net/2019/12/22/6XKpcg2RMoTaPmW.jpg" alt="长表"></li></ul><ul><li>将长表转化成宽表,对数据进行透视, 相当于Excel中的数据透视表功能。</li></ul><pre class=" language-python"><code class="language-python">df<span class="token punctuation">.</span>pivot_table<span class="token punctuation">(</span>index <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'computer'</span><span class="token punctuation">,</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> columns <span class="token operator">=</span> <span class="token string">'year'</span><span class="token punctuation">,</span> values <span class="token operator">=</span> <span class="token string">'sale'</span><span class="token punctuation">)</span></code></pre><ul><li>将宽表转换成长表</li></ul><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 方法1： melt()</span>df<span class="token punctuation">.</span>melt<span class="token punctuation">(</span>id_vars <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'company'</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> var_name <span class="token operator">=</span> <span class="token string">'year'</span><span class="token punctuation">,</span> value_name <span class="token operator">=</span> <span class="token string">'sale'</span><span class="token punctuation">)</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 方法1： stack()</span><span class="token comment" spellcheck="true"># 在保持行索引不变的前提下，将列索引转化成行索引 </span></code></pre><p><img src="https://i.loli.net/2019/12/22/4pKoUMivFNIqzXu.jpg" alt="宽表转换成长表"></p><hr><h1 id="对字符串进行操作"><a href="#对字符串进行操作" class="headerlink" title="对字符串进行操作"></a>对字符串进行操作</h1><ol><li>大小写</li></ol><pre><code>a.lower()a.upper()</code></pre><ol start="2"><li>长度</li></ol><pre><code># 长度a.len()</code></pre><ol start="3"><li>去除空格</li></ol><pre><code>a.strip()a.lstrip()alrstrip()</code></pre><ol start="5"><li>切分与分列、 合并</li></ol><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#切分</span>a<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'_'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 切分， 且成为新列</span>a<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'_'</span><span class="token punctuation">,</span> expand <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 对切分进行限制, 只切1次</span>a<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'_'</span><span class="token punctuation">,</span> expand <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">,</span> n<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 查看是否包含</span>a<span class="token punctuation">.</span>str<span class="token punctuation">.</span>contains<span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 分列</span>s<span class="token punctuation">.</span>str<span class="token punctuation">.</span>get_dummies<span class="token punctuation">(</span>sep<span class="token operator">=</span> <span class="token string">'|'</span><span class="token punctuation">)</span>df <span class="token operator">=</span> 首页jhrj_1<span class="token punctuation">[</span><span class="token string">'所属省份编码'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>str<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># expand=True  可以把用分割的内容直接分列</span>首页jhrj_1<span class="token punctuation">[</span><span class="token string">"所属省份编码1"</span><span class="token punctuation">]</span><span class="token operator">=</span>df<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 切分并在原表中进行合并</span>首页jhrj_2 <span class="token operator">=</span> pd<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>首页jhrj_1<span class="token punctuation">,</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>首页jhrj_1<span class="token punctuation">[</span><span class="token string">'所属省份编码'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>str<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">,</span> expand <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>               how <span class="token operator">=</span> <span class="token string">'left'</span><span class="token punctuation">,</span> left_index <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">,</span> right_index <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># pandas对dataframe中的某一列使用split做字符串切割：</span><span class="token comment" spellcheck="true"># words = df['col'].split()</span><span class="token comment" spellcheck="true"># 报错：</span><span class="token comment" spellcheck="true"># AttributeError: 'Series' object has no attribute 'split'</span><span class="token comment" spellcheck="true"># 原因是df['col']返回的是一个Series对象，需要先把Series对象转换为字符串：pandas.Series.str.split</span><span class="token comment" spellcheck="true"># words = df['col'].str.split()</span>对两列数据进行合并df<span class="token punctuation">[</span><span class="token string">'省份_名称'</span><span class="token punctuation">]</span> <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token string">'省份'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>str<span class="token punctuation">.</span>cat<span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">'名称'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>sep <span class="token operator">=</span> <span class="token string">'_'</span><span class="token punctuation">)</span>首页jdt_1<span class="token punctuation">[</span><span class="token string">'省份_标题'</span><span class="token punctuation">]</span> <span class="token operator">=</span> 首页jdt_1<span class="token punctuation">[</span><span class="token string">'所属省份编码'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">.</span>str<span class="token punctuation">.</span>cat<span class="token punctuation">(</span>首页jdt_1<span class="token punctuation">[</span><span class="token string">'标题'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>sep <span class="token operator">=</span> <span class="token string">'_'</span><span class="token punctuation">)</span></code></pre><h1 id="日期-时间"><a href="#日期-时间" class="headerlink" title="日期-时间"></a>日期-时间</h1><ul><li>当前日期</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">from</span> datetime <span class="token keyword">import</span> datetime<span class="token punctuation">,</span> time<span class="token punctuation">,</span> timedelta<span class="token comment" spellcheck="true"># 返回当前日期和时间</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 返回当前时间的年</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>year<span class="token comment" spellcheck="true"># 返回当前时间的月份</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>month<span class="token comment" spellcheck="true"># 返回当前日期的日期</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>day<span class="token comment" spellcheck="true"># 返回当前时刻在周几</span><span class="token comment" spellcheck="true"># python周几默认是从0开始的</span>datatime<span class="token punctuation">.</span>now<span class="token punctuation">.</span>weekeday<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token comment" spellcheck="true"># 返回当前时间所在周的周数</span>datatime<span class="token punctuation">.</span>now<span class="token punctuation">.</span>isocalendar<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span></code></pre><ul><li>返回指定日期</li></ul><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 只展现日期</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">.</span>date<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 只展示时间</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 显示当前日期</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">'%Y-%m-%d'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#2018-12-22</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span>'<span class="token operator">%</span>Y<span class="token operator">-</span><span class="token operator">%</span>m<span class="token operator">-</span><span class="token operator">%</span>d <span class="token operator">%</span>H<span class="token punctuation">:</span><span class="token operator">%</span>M<span class="token punctuation">:</span><span class="token operator">%</span>S"<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 将时间格式转化成字符串格式</span>now<span class="token operator">=</span>str<span class="token punctuation">(</span> datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 将字符串格式转化为时间格式</span>parse<span class="token punctuation">(</span>str_now<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 往后推一天</span>date<span class="token operator">+</span> Day<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 往后推一个小时</span>date <span class="token operator">+</span> Hour<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 往前推一天</span>date <span class="token operator">-</span> Day<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 昨天</span>ysd <span class="token operator">=</span> now <span class="token operator">-</span> timedelta<span class="token punctuation">(</span>days <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#本月第一天</span>ysd <span class="token operator">=</span> now<span class="token punctuation">.</span>replace<span class="token punctuation">(</span>day <span class="token operator">=</span> now<span class="token punctuation">.</span>day<span class="token number">-1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#  上月最后一天</span>lastmonth_end <span class="token operator">=</span> now<span class="token punctuation">.</span>replace<span class="token punctuation">(</span>day <span class="token operator">=</span> now<span class="token punctuation">.</span>day<span class="token number">-1</span><span class="token punctuation">)</span> <span class="token operator">-</span> timedelta<span class="token punctuation">(</span>days<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 上月第一天</span>lastmonth_first <span class="token operator">=</span> now<span class="token punctuation">.</span>replace<span class="token punctuation">(</span>month <span class="token operator">=</span> now<span class="token punctuation">.</span>month<span class="token number">-1</span><span class="token punctuation">,</span> day <span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>lastmonth_first <span class="token operator">=</span> lastmonth_end<span class="token punctuation">.</span>replace<span class="token punctuation">(</span>day<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#提取2016年11月2号的数据</span>df<span class="token punctuation">[</span><span class="token string">'2016-11-02'</span> <span class="token punctuation">:</span> <span class="token string">'2016-11-02'</span><span class="token punctuation">]</span>dt_time <span class="token operator">=</span> dt<span class="token punctuation">.</span>datetime<span class="token punctuation">(</span>year <span class="token operator">=</span> <span class="token number">2018</span><span class="token punctuation">,</span> month<span class="token operator">=</span><span class="token number">9</span><span class="token punctuation">,</span> day <span class="token operator">=</span> <span class="token number">17</span><span class="token punctuation">,</span> hour <span class="token operator">=</span> <span class="token number">22</span><span class="token punctuation">,</span> minute <span class="token operator">=</span> <span class="token number">43</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 构造时间序列， 构造十个日期， 每12分钟一次</span>pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span>pd<span class="token punctuation">.</span>date_range<span class="token punctuation">(</span>start <span class="token operator">=</span> <span class="token string">'2018-09-17 22:43:00'</span><span class="token punctuation">,</span> periods <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> freq <span class="token operator">=</span> <span class="token string">'12min'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 取所有8点到12点之间的数据, 不包含8点和12点</span>data<span class="token punctuation">[</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>index<span class="token punctuation">.</span>hour <span class="token operator">></span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>index<span class="token punctuation">.</span>hour <span class="token operator">&lt;</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 包含8点到12点</span>data<span class="token punctuation">.</span>between_time<span class="token punctuation">(</span><span class="token string">'08:00'</span><span class="token punctuation">,</span> <span class="token string">'12:00'</span><span class="token punctuation">)</span><span class="token keyword">import</span> datetime<span class="token keyword">from</span> dateutil<span class="token punctuation">.</span>relativedelta <span class="token keyword">import</span> relativedelta begin <span class="token operator">=</span> datetime<span class="token punctuation">.</span>date<span class="token punctuation">(</span><span class="token number">2019</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>end <span class="token operator">=</span> datetime<span class="token punctuation">.</span>date<span class="token punctuation">(</span><span class="token number">2019</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    first <span class="token operator">=</span> d <span class="token operator">+</span> relativedelta<span class="token punctuation">(</span>months<span class="token operator">=</span>i<span class="token punctuation">)</span>    last <span class="token operator">=</span> end <span class="token operator">+</span> relativedelta<span class="token punctuation">(</span>months<span class="token operator">=</span>i<span class="token punctuation">)</span></code></pre><ul><li>处理月与月之间时间不连续问题</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> time <span class="token keyword">from</span> datetime <span class="token keyword">import</span> datetime<span class="token punctuation">,</span> time<span class="token punctuation">,</span>timedelta<span class="token comment" spellcheck="true"># 指定昨天</span>df <span class="token operator">=</span> datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> timedelta<span class="token punctuation">(</span>days <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 月初第一天</span>startdates <span class="token operator">=</span> <span class="token punctuation">(</span>df<span class="token punctuation">.</span>replace<span class="token punctuation">(</span>day <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">'%Y-%m-%d'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 昨天</span>enddates <span class="token operator">=</span> <span class="token punctuation">(</span>df <span class="token operator">-</span> timedelta<span class="token punctuation">(</span>days <span class="token operator">=</span> num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">'%Y-%m-%d'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 上月第一天</span>last_moth_f <span class="token operator">=</span> df<span class="token punctuation">.</span>replace<span class="token punctuation">(</span>month <span class="token operator">=</span>df<span class="token punctuation">.</span>month<span class="token number">-1</span><span class="token punctuation">,</span> day<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__format__<span class="token punctuation">(</span><span class="token string">"%Y-%m-%d"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 上月最后一天</span>last_moth_e <span class="token operator">=</span> df<span class="token punctuation">.</span>replace<span class="token punctuation">(</span>month <span class="token operator">=</span> df<span class="token punctuation">.</span>month<span class="token number">-1</span><span class="token punctuation">,</span> day <span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">'%Y-%m-31'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 目标值月份</span>mubiao_dates <span class="token operator">=</span> startdates<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 将字符串转换为日期</span>df <span class="token operator">=</span> datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> timedelta<span class="token punctuation">(</span>days <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span>day1 <span class="token operator">=</span> <span class="token punctuation">(</span>df<span class="token punctuation">.</span>replace<span class="token punctuation">(</span>day <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">'2019-11-%d'</span><span class="token punctuation">)</span>first <span class="token operator">=</span> datetime<span class="token punctuation">.</span>strptime<span class="token punctuation">(</span>day1<span class="token punctuation">,</span> <span class="token string">"%Y-%m-%d"</span><span class="token punctuation">)</span></code></pre><!-- --------# 自动发送邮件```import smtplibfrom email import encoders```![123.jpg](https://i.loli.net/2019/12/23/uqFn819yGEjWRPQ.jpg)![456.jpg](https://i.loli.net/2019/12/23/Druqb2zyHi6ESQV.jpg) --><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>思考系统</title>
      <link href="/2019/09/07/tong-yong-si-kao-neng-li-si-kao-xi-tong/"/>
      <url>/2019/09/07/tong-yong-si-kao-neng-li-si-kao-xi-tong/</url>
      
        <content type="html"><![CDATA[<h1 id="批判性思维"><a href="#批判性思维" class="headerlink" title="批判性思维"></a>批判性思维</h1><h2 id="图尔敏模型"><a href="#图尔敏模型" class="headerlink" title="图尔敏模型"></a>图尔敏模型</h2><p> <img src="https://i.loli.net/2020/03/10/PNtsn39cULezuSm.png" alt="未命名文件.png"></p><ul><li><p>举例：</p><blockquote><p>小明出生在北京，所以小明是中国人。</p></blockquote></li><li><p>论题： 小明出生在北京</p></li><li><p>前提： 在北京出生的是中国人</p></li><li><p>支撑： 现有法律规定</p></li><li><p>逻辑推理： 在北京出生的是中国人，小明在北京出生，所以小明是中国人。</p></li><li><p>反例：小明后来移民加拿大。</p></li><li><p>对推理的限定： 小明并非一定就是中国人</p></li><li><p>结论：因为小明出生在北京，所以小明可能是中国人。</p></li></ul><hr><h2 id="对各个模块进行解释"><a href="#对各个模块进行解释" class="headerlink" title="对各个模块进行解释"></a>对各个模块进行解释</h2><ol><li><p>论题<br>论题是要讨论的问题或争议。</p><p>论题分为两种形式：</p><ul><li>一种是对事实的讨论，比如：服用中药 <em>是不是</em> 能治好疾病，杨教授的学术研究水平 <em>怎么样</em>？ 人口出生率下降的原因 <em>是什么</em>？</li><li>另一种是对价值主张的讨论， 比如：大学生 <em>应不应该</em> 读研， 对全民医疗 <em>应该</em> 采取什么样的态度？</li></ul><p>不同类型的论题，做出的评价是不同的，我们在讨论一件事情时，<strong>要检查两点</strong>：</p><ul><li><strong>我们是在讨论某个事实，还是讨论价值主张。</strong></li><li><strong>我有没有正面回答问题。</strong></li></ul></li><li><p>结论<br>结论是要让你相信的观点和信息, 必须是有论证支撑的观点。</p><ul><li><p><strong>没有论据支撑的观点不能叫结论。</strong></p></li><li><p>当某人说出他的观点时， 我们应该马上问：你这个看法有什么依据？</p></li></ul><p>注意问题：</p><ul><li><p><strong>偷换结论</strong><br>用一个相关性很强的结论来换掉正面回答问题的结论。</p></li><li><p><em>原理：默认预设，认为结论只能二选一。*</em></p></li><li><p>鱼和熊掌不可兼得，我拿不到鱼，所以我会拿到熊掌。</p></li><li><p>年轻人不愿意生孩子，所以养猫的人会越来越多。</p></li><li><p><strong>先有结论，再证明合理</strong><br>人先作了决定，然后给出的理由并不是来推导这个决定，而是想办法维护这个决定。</p></li></ul><p>在作一些决定和选择时，要先问自己：影响决策的是理性判断还是情绪等影响。</p></li><li><p>论证前应明确的两个问题<br><strong>明确对方是在进行论证，还是在进行解释。</strong></p><ul><li>解释并没有证明论证确实成立，而是把结论变成了默认前提。<br>论证是指：我还没有相信或者认同你，你得证明你的判断。</li><li>将 <strong>因为</strong> 用 <strong>根据…、基于…、理由是…</strong> 来进行替换， 将 <strong>所以</strong> 用 <strong>得出…、推断…、证明…</strong> 来进行替换，看语句是否通顺。</li><li><ul><li>我在吃饭，因为我往嘴里塞食物。</li></ul></li></ul><p>解释是指：我们已经承认了事实，视图说明为什么事实是这样的。</p><ul><li>将 <strong>因为</strong> 用 <strong>归因于…</strong> 来进行替换， 将 <strong>所以</strong> 用 <strong>导致…</strong> 来进行替换，看语句是否通顺。</li><li><ul><li>我在吃饭，因为我饿了。</li></ul></li></ul><p><strong>识别概念的定义区别</strong></p><ul><li>在论题、论证和结论中出现的概念是一致的吗,这些观念会误导别人吗？</li><li>关键概念的定义准确吗？</li><li>在思考和论证的过程中，把一件事定义清楚。<br>参考：《学会提问》第4章</li></ul></li><li><p>挖掘论证中两种隐藏假设</p><p><strong>事实判断型的假设</strong>，</p><ul><li>这个世界是什么样的？一个理由是否能证实结论，主要取决于我们能否找到没有明说出来的想法，将理由和结论从逻辑上联系起来。<br>比如：每天一个鸡蛋，能补充蛋白质。假定：鸡蛋是富含蛋白质的。 </li><li>如何找出描述性假设</li><li>不断思考理由和结论之间的关系，寻找支持理由的想法、</li><li>把自己放到相反立场</li></ul><p><strong>价值判断型的假设</strong>，</p><ul><li>这个世界应该如何选择？价值观假设是认为某些价值观中一个比另一个更重要，并且选择的价值观会对结论产生重大影响，同时也影响他捍卫结论的方式，但是这种价值取向并没有说明。<br>比如价值观冲突： 忠诚-诚实、竞争-合作、媒体自由-国家安全、平等-个人主义、秩序-言论自由、理性-冲动。</li><li>如何找出价值观假设</li><li>言论者的背景是什么，他代表了哪方的利益？</li><li>注意作者用来证实结论的各种理由，然后判断哪些价值取向会导致作者认为这些理由比另一些理由更可取，而另一些理由其实可以从论题的另一方面进行论证。</li><li>如果我和作者站在相反的立场，我会如何反驳</li></ul><p><strong>判断假设</strong></p><ul><li>这个假设和我的个人经验冲突不？</li><li>这个假设是来自哪里的，消息来源可靠吗？</li><li>我自己想法，背后的隐藏假设是什么？</li></ul></li></ol><ol start="5"><li>支撑<ul><li>支撑是双方都公认的法则或常识。</li><li>法律法规</li><li>经检验的科学研究</li><li>注意类比的质量。</li></ul></li></ol><ol start="6"><li><p>反例</p><ul><li>对相反观点的论证，以达到论证的全面性。</li></ul></li><li><p>常见谬误：<br>参考下文：常见谬误详解</p></li></ol><hr><h2 id="用图尔敏模型进行议论文写作"><a href="#用图尔敏模型进行议论文写作" class="headerlink" title="用图尔敏模型进行议论文写作"></a>用图尔敏模型进行议论文写作</h2><ol><li><p>对文章主题进行介绍</p><ul><li>介绍能够引起读者注意的内容</li><li>对要表述的问题进行陈述</li><li>表达你的结论，并给出使用范围。</li></ul></li><li><p>提出证据来支撑论证</p><ul><li>证据1、2</li></ul></li></ol><ol start="3"><li><p>提供支撑保证的理由和事实，根据个人实践和理论来说明保证的合理性。</p><ul><li>支撑1、2</li></ul></li><li><p>回答反驳</p><ul><li>反驳1</li><li>对反驳1的回答<br>…</li></ul></li><li><p>结论</p><ul><li>概括论证和结论的要点，指出论证的意义，能够让读者印象深刻。</li></ul></li></ol><hr><h2 id="用图尔敏模型进行分析性写作"><a href="#用图尔敏模型进行分析性写作" class="headerlink" title="用图尔敏模型进行分析性写作"></a>用图尔敏模型进行分析性写作</h2><p>对某一文章质量进行评判</p><ul><li>理解主题论点，澄清概念的意义。</li><li>审查理由质量，挖掘潜在的假设。</li><li>分析论证结构，评估推理的强弱。</li><li>考虑替代论证， 提出完善的建议。</li></ul><h2 id="学习资料"><a href="#学习资料" class="headerlink" title="学习资料"></a>学习资料</h2><ul><li>课程-中国青年政治学院：批判性思维（谷振诣教授）<iframe src="//player.bilibili.com/player.html?aid=9624662&amp;cid=15907095&amp;page=3" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe></li></ul><ul><li><p><a href="https://en.wikipedia.org/wiki/Toulmin_method" target="_blank" rel="noopener">Toulmin method</a></p></li><li><p><a href="https://pan.baidu.com/s/1jHFsnFw?fid=154817059834328" target="_blank" rel="noopener">《逻辑新引.怎样辨别是非》</a></p><ul><li><p><a href="https://book.douban.com/subject/1863497//" target="_blank" rel="noopener">《beyond feelings》</a></p></li><li><p>《简单的逻辑学》</p></li><li><p>《学会提问》</p></li><li><p>《蔡钰-批判性思维15讲》</p></li><li><p><a href="https://www.youtube.com/watch?v=kBdfcR-8hEY&amp;list=PL30C13C91CFFEFEA6" target="_blank" rel="noopener">Justice – What’s the right thing to do?</a></p></li></ul></li></ul><!--  * [Critical Reasoning for Beginners》](https://www.youtube.com/watch?v=kBlQj5uiOXc&list=PLA795AB5BDDD2B0B3) --><hr><h1 id="结构化思维"><a href="#结构化思维" class="headerlink" title="结构化思维"></a>结构化思维</h1><p> 对信息进行<strong>识别、归纳、概括、总结和表达。</strong></p><p><img src="https://i.loli.net/2020/03/16/QbL2rwTzn9tcvy8.jpg" alt="微信图片_20200316111654.jpg"></p><h2 id="识别信息"><a href="#识别信息" class="headerlink" title="识别信息"></a>识别信息</h2><p> 纵向上的总分结构</p><ul><li>识别结论</li><li>识别理由</li><li>识别事实<br>参考:上文批判性思维</li></ul><h2 id="归纳信息"><a href="#归纳信息" class="headerlink" title="归纳信息"></a>归纳信息</h2><p> 横向上的分类结构</p><ul><li>MECE 分类法： 不重不漏</li><li>二分法</li><li>过程法： 发展时间、运作流程</li><li>要素法：从上到下、从外到内、从整体到局部</li><li>公式法：按照公式的要素去分类。</li><li>矩阵法</li><li>特定场景模型：<a href="https://zhangandyu.github.io/2019/02/26/%E6%96%B9%E6%B3%95-%E5%B8%B8%E8%A7%81%E7%9A%84%E5%88%86%E6%9E%90%E6%A8%A1%E5%9E%8B/" target="_blank" rel="noopener">常见的分析思维模型</a></li></ul><h2 id="总结概括信息"><a href="#总结概括信息" class="headerlink" title="总结概括信息"></a>总结概括信息</h2><p> <img src="https://i.loli.net/2020/03/16/75y3u8AHNkYOoDl.jpg" alt="微信图片_20200316111700.jpg"><br>  <strong>归纳法</strong></p><ul><li><p>根据许多个别事物的特殊性来概括出同类事物的特性。</p><p>描述性概括</p><ul><li>找出事物属性上的共同点。</li></ul><p>行动性概括</p><ul><li>最终结果是什么，找出事物结果的共性。</li></ul></li></ul><p><strong>演绎法</strong></p><ul><li><p>将某一事实与对应的某个规律联系再一起，得出结论。</p><p>注意事项：</p><ul><li>大前提一定要无可争议，避免主观判断，并且罗列不能过长。</li><li>小前提是一个已经发生的事实。</li></ul></li></ul><h2 id="清晰表达"><a href="#清晰表达" class="headerlink" title="清晰表达"></a>清晰表达</h2><p><strong>1.结论先行</strong><br>  表达时先说结论</p><p><strong>2.以上统下</strong><br> 上一层次要点必须是下一层次的概括</p><p><strong>3.归类分组</strong><br>  每一组要点必须属于同一范畴</p><p><strong>4.逻辑递进</strong><br>  每个要点必须按照一定的逻辑顺序排列。</p><ul><li>演绎推理</li><li>时间/步骤顺序</li><li>空间顺序</li><li>重要性顺序</li></ul><p>注意事项： 结论先行，重要的理由说三点。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li>《得到-有效训练你的结构化思维》</li><li>《金字塔原理》</li></ul><hr><h1 id="如何解决问题"><a href="#如何解决问题" class="headerlink" title="如何解决问题"></a>如何解决问题</h1><h2 id="1-明确和理解问题"><a href="#1-明确和理解问题" class="headerlink" title="1. 明确和理解问题"></a>1. 明确和理解问题</h2><ul><li>明确问题的本质到底是什么</li><li>跟领导确认希望达到的目标</li><li>明确可以利用的资源</li></ul><h2 id="2-拆分和定位问题"><a href="#2-拆分和定位问题" class="headerlink" title="2.拆分和定位问题"></a>2.拆分和定位问题</h2><ul><li>用公式思维拆解问题</li><li>逻辑树-金字塔原理（mece法则)</li><li>假设驱动-假设问题可能出现在某个细分的问题点上。</li></ul><h2 id="3-提出解决方案并总结"><a href="#3-提出解决方案并总结" class="headerlink" title="3.提出解决方案并总结"></a>3.提出解决方案并总结</h2><ul><li>结论先行<br>参考上文：结构化思维</li></ul><!-- ## 4. 个人目标解决方案* 熟悉所在领域的业务和常识，不断问自己为什么* 列一个清单，然后排序做选择* 假设一种无条件获得的极端情况* 不断了解你的选择，不断的去试错 --><h2 id="4-工作中解决问题的方法"><a href="#4-工作中解决问题的方法" class="headerlink" title="4. 工作中解决问题的方法"></a>4. 工作中解决问题的方法</h2><ol><li>快速按照理解去做拆解，去做思维导图， 能想到多少是多少</li><li>拿着拆解思维导图去跟业务方的人去请教，一定要找到业务方真正关心的点</li><li>结合业务方给出的具体建议， 修改第一步的思维框架， 做完后，请教你的领导</li><li>再改一次， 回报给业务方领导</li><li>遇到坑之后， 一定要文档详细记录下来。<ul><li>让团队中其他人知道， 节省团队时间。</li><li>知道自己在哪块花了大量时间，为后续分析节省时间。</li></ul></li></ol><h2 id="5-生活中问题解决的4个层次"><a href="#5-生活中问题解决的4个层次" class="headerlink" title="5. 生活中问题解决的4个层次"></a>5. 生活中问题解决的4个层次</h2><ol><li>有没有找到真正的问题， 人都是有逃避心理的。</li><li>想到了问题的第几层</li><li>想到了最后一层， 并且去执行解决问题</li><li>做到了，并且分享帮助别人</li></ol><hr><h1 id="常见谬误详解"><a href="#常见谬误详解" class="headerlink" title="常见谬误详解"></a>常见谬误详解</h1><p>1.幸存偏误<br>  在生活中更容易看到成功者的故事，看不到失败， 你会系统性地高估成功的概率。</p><p>2.游泳选手身材错觉<br>  你看到游泳选手的身材好，因此你觉得游泳就可以练就这样的身材。你觉得用这个护肤品的模特都好漂亮， 因此你觉得用了这个护肤品自己也可以变漂亮。 </p><p>  其实是因为他们有这样的好身材， 所以他们才能被选为游泳运动员。  和游泳能够练就这样的身材没有直接的关系。 </p><p>  用这个护肤品的模特好看， 是因为这个模特好看， 所以她才能被选做拍这个护肤品的广告， 和这个护肤品可以让自己更漂亮没有直接关系。 </p><p> 3.过度自信效应<br>  系统性地高估自己的学识和能力<br>  过度自信会令你忽视你真正掌握的能力与你已知的知识之间的区别<br>  这个怎么理解呢， 就是你很多知识， 你只是了解， 而并非已经内化成你的能力， 而你会错误的把它归为你能力的一部分。 比如你说你会python, 但当你真正写的时候， 你却写不出来， 其实你没有掌握</p><p> 4.诉诸结果<br>  依据某观点成立所产生的结果好坏，来判断一个观点是否正确。 </p><p> 5.稻草人谬误<br>  有意地模仿他人观点，以达到攻击模仿出来的观点而非实际论点的目的。</p><p> 6.诉诸无关权威<br>  诉诸不是问题专家的人， 其观点更可能是错误的。 例如：信仰中医，而不相信现代医学</p><p> 7.虚假两难<br>  给出一个有两种范畴组成的有限集合， 并假设讨论范围内的一切事物都必须属于该集合。因此<br>  若拒绝其中一个范畴，便只好接受另一个。<br>  例如： 世界上只有两种人，男人和女人， 你既然不是女人， 那么你一定是男人。</p><p> 8.人身攻击<br>  通过攻击一个人本身，而不是攻击其论点，以转移讨论话题，最终达到诋毁其论点的目的。<br>  “侮辱性人身攻击” ： 你又不是专家， 你有什么资格发言<br>  “处境类人身攻击” ： 对他们的动机作出判断。 你又不是真正关心降低城市犯罪率， 你只是想要人们投票给你。</p><p> 9.循环论证<br>  你完全错了， 因为你说得没有道理。<br>  你应该相信上帝， 否则你会下地狱。</p><p> 10.从众心理</p><p> 11.纠缠于沉迷成本<br> 我已经买了电影票了， 电影再烂也要看完。<br>  我已经在这段恋情中投入了那么多感情， 现在离开她是不明智的。<br>  我已经在这支股票中投了那么多钱了， 现在就收手会亏本的， 说不定以后会涨的。</p><ul><li>你应该看的是现在的形势以及你对未来的评估。</li></ul><p>12.互惠偏误<br>  先送你一束花， 然后让你捐赠。</p><ul><li>诉诸公众</li><li>诉诸感情</li><li>滑坡谬误</li><li>偷换概念</li><li>转移话题</li><li>因果混淆：相关并不能证明因果。</li><li>事后归因<br>参考资料：<ul><li>《简单的逻辑学》第5章</li><li>《有用的逻辑学》</li></ul></li></ul><hr><!-- -----<!-- ------------------------------------------------- 《精准表达：让你的方案在最短的时间内打动人心》逻辑思考能力， 语言组织能力1. 为什么说话要讲逻辑为了让任何人都能够听懂并接受我们的方案。 对方与我们的文化背景大不相同， 或者与我们持相反一件， 不注意讲话的逻辑， 对方可能听不懂我们的方案。 2. 什么是逻辑把语言合理的组织起来 3. 有逻辑的讲话分为哪些方面* 纵向逻辑 因为A， 所以B。 因为B， 所以C。 * 横向逻辑 - MECE 分析法 A包含B和C。 4. 缺乏逻辑性：* 缺乏纵向逻辑 - 真的是这样吗* 缺乏横向逻辑 - 仅仅是这样吗5. 真的是这样吗？纵向逻辑组织的不好， 因果关系比较薄弱。 当对方要求你仔细解释你的纵向逻辑时， 你能回答出来。 做到针对对方的提问能够详细的做出解释。 6. 真的是这样吗？未能合理把握整体思路， 出现了遗漏和重复。 覆盖范围广、分类细致。 7. 纵向逻辑薄弱的原因* 前提条件不同因为A， 所以B。 但是A 包含 A1, A2, A3, A4等隐形前提。 要做到有逻辑性地讲话， 应该先质疑自己的前提条件。 想想一个与自己前提条件大不相同的人， 设想他可能会提出怎么的问题。 发现自己的隐形前提。 * 把不同性质的东西混为一谈因为A, 所以B。 但A的范围里包含了A1、A2、A、3 等不同性质的东西反省自己的额言论， 看自己是否把不同东西混为一谈了。 是否有必要把这件事细致分类， 再进行讨论。 * 偶然的必然化因为A， 所以B。 但是A到B之间原因太过跳跃， 让听众以为是偶然事件。 思考哪些印因素可能会破坏因果关系，先想象一下具体情形， 然后按照顺序想想最坏的情形。 8. 如何加强横向逻辑体会语言中的层次感把不同角度的概念拉拢到同一平面。 然后再讨论遗漏与重复的重复等问题。 如何把不同角度的概念拉到同一平面？* 面对同一概念， 不同的人有不同的看法。 * 面对同一概念， 不同的人会从不同的切入点开始展开联想。 首先， 确认对方是以何种立场还思考问题的。 其次， 确认对方设想的是何种场景。 如何实现MECE状态？* 使用架构5p, 营销理论3c, 战略模型7S模型SPRO, SPCO模型AIDAS原理PDCA循环根据具体情况采用合理架构。* 避免遗漏六维度理论常见的三个维度， 维度4, 时间的流动。 维度5， 信息、电力、交易等物质的流动维度6， 人们的心情和习惯* 消除重复当我们同时具备了 横向逻辑 和 纵向逻辑， 就构建了金字塔结构。  -- --><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 个人系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逻辑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/09/07/hello-world/"/>
      <url>/2018/09/07/hello-world/</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th>配置选项</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>title</td><td>Markdown 的文件标题</td><td>文章标题，强烈建议填写此选项</td></tr><tr><td>date</td><td>文件创建时的日期时间</td><td>发布时间，强烈建议填写此选项，且最好保证全局唯一</td></tr><tr><td>author</td><td>根 _config.yml 中的 author</td><td>文章作者</td></tr><tr><td>img</td><td>featureImages 中的某个值</td><td>文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.</td></tr><tr><td>top</td><td>true</td><td>推荐文章（文章是否置顶），如果 top 值为 true，则会作为首页推荐文章</td></tr><tr><td>cover</td><td>false</td><td>v1.0.2版本新增，表示该文章是否需要加入到首页轮播封面中</td></tr><tr><td>coverImg</td><td>无</td><td>v1.0.2版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td></tr><tr><td>password</td><td>无</td><td>文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 password 的值，该值必须是用 SHA256 加密后的密码，防止被他人识破。前提是在主题的 config.yml 中激活了 verifyPassword 选项</td></tr><tr><td>mathjax</td><td>false</td><td>是否开启数学公式支持 ，本文章是否开启 mathjax，且需要在主题的 _config.yml 文件中也需要开启才行</td></tr><tr><td>summary</td><td>无</td><td>文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td></tr><tr><td>categories</td><td>无</td><td>文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td></tr><tr><td>tags</td><td>无</td><td>文章标签，一篇文章可以多个标签</td></tr><tr><td>keywords</td><td>文章标题</td><td>文章关键字，SEO 时需要</td></tr></tbody></table><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
